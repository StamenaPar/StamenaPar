{"version":3,"sources":["Answers/actions.ts","Questions/actions.ts","user/actions.ts","Questions/reducer.ts","Answers/reducer.ts","user/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/AutoSuggestAnswer.tsx","Questions/components/QuestionAnswers.tsx","common/Select.tsx","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","common/useHover.tsx","Questions/components/QuestionRow.tsx","Questions/components/GroupRow.tsx","formik/theme.js","Answers/components/Form.tsx","Questions/components/DetailView.tsx","Questions/components/QuestionsPage.tsx","Questions/components/PromoterPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","Answers/components/ListRow.tsx","Answers/components/List.tsx","Answers/components/Page.tsx","Answers/containers/Page.tsx","index.tsx"],"names":["AnswerActionTypes","getInitial","storageAnswersDemo","map","a","created","Date","SUPPORT_ANSWERS","QuestionActionTypes","getFromInitial","storageQuestionsByGroupsDemo","g","questions","q","UserActionTypes","getQuestion","questionId","dispatch","type","GET_QUESTION","err","console","error","delay","Promise","resolve","reject","setTimeout","updateGroupFromLocalStorage","group","SUPPORT_QUESTIONS","initialQuestion","groupId","text","words","answers","createdBy","initialQuestionGroup","title","initialQuestionState","questionGroups","question","undefined","loading","formMode","groupIdEditing","isDetail","aTypesToSTore","Object","keys","filter","GET_ALL_QUESTIONS","myReducer","state","action","section","split","f","find","ADD_QUESTION","questionGroup","length","Math","max","EDIT_QUESTION","STORE_QUESTION","CANCEL_QUESTION","REMOVE_QUESTION","REMOVE_QUESTION_ANSWER","answerId","ASSIGN_QUESTION_ANSWER","SET_IS_DETAIL","ADD_GROUP","EDIT_GROUP","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","initialAnswer","options","initialAnswerState","answer","GET_ALL_ANSWERS","GET_ANSWER","ADD_ANSWER","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","storageUsersDemo","storageUsers","initialUserState","users","rootReducer","combineReducers","questionState","newState","includes","localStorage","setItem","JSON","stringify","answerState","userState","GET_ALL_USERS","user","GET_USER","inputAutosuggest","createRef","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","tekst","getSuggestions","highlighted","window","focus","current","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderInputComponent","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","data","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","ref","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","AutoSuggestAnswer","assignQuestionAnswer","setAnswerText","answersUnassigned","QuestionAnswers","questionAnswers","canEdit","removeQuestionAnswer","setIsDetail","setTekst","onClick","stopPropagation","preventDefault","icon","faWindowClose","color","val","divDetailView","document","getElementById","classList","add","style","zIndex","goDetail","faPlus","Select","log","selectedIndex","currentTarget","selectedOption","option","label","Form","formik","useFormik","enableReinitialize","initialValues","userOptions","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","id","name","handleChange","onBlur","handleBlur","disabled","width","touched","errors","multiple","cancel","DisplayForm","edit","remove","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","addEventListener","removeEventListener","QuestionRow","hoverRef","faEdit","GroupRow","editGroup","removeGroup","COLORS","require","palx","fromMode","toLocaleDateString","AnswerForm","height","background","padding","borderRadius","boxShadow","maxWidth","margin","DetailView","contains","left","position","right","border","marginTop","storeNewAnswer","QuestionsPage","useParams","addGroup","storeGroup","inputEl","select","textAlign","paddingBottom","target","defaultValue","marginLeft","PromoterPage","joinAnswers","answerIds","mapStateToProps","store","ownProps","userId","mapDispatchToProps","questionGroupId","editQuestion","removeQuestion","storeQuestion","connect","promoter","App","ListRow","usedAnswers","List","Page","slug","getUsedAnswers","concat","editAnswer","removeAnswer","storeAnswer","cols","base","black","forEach","css","global","borderColor","outline","Root","basename","to","exact","path","clear","getItem","createStore","applyMiddleware","thunk","sQuestions","parse","sAnswers","sUsers","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.094a98be.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './types';\r\n\r\nimport storageAnswersDemo from \"./initialData.json\"\r\nconst getInitial = () => {\r\n\treturn storageAnswersDemo.map(a => ({...a, created: new Date(a.created)}))\r\n}\r\n\r\n// localStorage\r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS';\r\n \r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel; // |IStoreAnswersToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tlet answers: IAnswer[] = [];\r\n\t\t\tif (isWebStorageSupported()) {\r\n\t\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\t\tif (sAnswers !== null) {\r\n\t\t\t\t\tanswers = JSON.parse(sAnswers)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tanswers = getInitial()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tanswers = getInitial()\r\n\t\t\t}\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.GET_ALL_ANSWERS,\r\n\t\t\t\tanswers: answers\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.GET_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.EDIT_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.REMOVE_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tif (formMode === 'add') {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\t\tanswer\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\t\tanswer\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n// const removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n// \treturn new Promise((resolve, reject) => {\r\n// \t\tsetTimeout(() => {\r\n// \t\t\tresolve({\r\n// \t\t\t\t'status': 200,\r\n// \t\t\t\t'content-type': 'application/json',\r\n// \t\t\t\t'data' : {\r\n// \t\t\t\t'results': answerId\r\n// \t\t\t\t}\r\n// \t\t\t})\r\n// \t\t}, 50)\r\n// \t})\r\n// }\r\n","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup, IQuestionState } from './types';\r\n\r\nimport { AnswerActionTypes } from '../Answers/actions'\r\nimport { IAnswer, IAnswerState } from '../Answers/types';\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\nimport storageQuestionsByGroupsDemo from \"./initialData.json\"\r\nimport { SUPPORT_QUESTIONS } from './reducer';\r\n\r\nconst getFromInitial = () => {\r\n\treturn storageQuestionsByGroupsDemo.map(g => ({\r\n\t\t...g,\r\n\t\tquestions: g.questions.map(q => ({ ...q, created: new Date(q.created) }))\r\n\t}));\r\n}\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\r\n\t// question answers\r\n\tREMOVE_QUESTION_ANSWER = 'REMOVE_QUESTION_ANSWER',\r\n\tASSIGN_QUESTION_ANSWER = 'ASSIGN_QUESTION_ANSWER',\r\n\t// localSTorage\r\n\tSET_IS_DETAIL = 'SET_IS_DETAIL'\r\n}\r\n\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n\tquestionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestionId: number;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number\r\n\t//questionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\t//groupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\n\r\n// question answers\r\nexport interface IRemoveQuestionAnswer {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\nexport interface IAssignQuestionAnswer {\r\n\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number,\r\n\ttekst?: string\r\n}\r\n\r\nexport interface ISetIsDetail {\r\n\ttype: QuestionActionTypes.SET_IS_DETAIL;\r\n\tisDetail: boolean\r\n}\r\n\r\nexport interface IStoreNewAnswer {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\tIAddGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\tIRemoveQuestionAnswer | IAssignQuestionAnswer |\r\n\tISetIsDetail | IStoreNewAnswer;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\nexport const storeNewAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\tconsole.log('storeNewAnswer answer:', answer)\r\n\t\ttry {\r\n\t\t\tif (formMode === 'add') {\r\n\t\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.ADD_ANSWER\r\n\t\t\t\t});\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\t\tanswer\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t}\r\n\t\t\t//if (isWebStorageSupported())\r\n\t\t\t// \tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\t\t \r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IGetAll>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tlet questionGroups: IQuestionGroup[] = [];\r\n\t\t\tif (isWebStorageSupported()) {\r\n\t\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\t\tif (sQuestions !== null) {\r\n\t\t\t\t\tquestionGroups = JSON.parse(sQuestions)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tquestionGroups = getFromInitial();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tquestionGroups = getFromInitial();\r\n\t\t\t}\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n\t\t\t\tquestionGroups\r\n\t\t\t});\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, string, IGet>\r\n> = (questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IAdd>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ADD_QUESTION,\r\n\t\t\t\tgroupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.EDIT_QUESTION,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t\t\tgroupId: groupId,\r\n\t\t\t\tquestionId: questionId,\r\n\t\t\t\tanswerId: answerId,\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const assignQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number, tekst?: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay();\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const setIsDetail: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, ISetIsDetail>\r\n> = (isDetail: boolean) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.SET_IS_DETAIL,\r\n\t\t\t\tisDetail\r\n\t\t\t});\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const storeQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tif (formMode === 'add') {\r\n\t\t\t\tawait delay();\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\t\tquestion: question,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tawait delay();\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\t\tquestion\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data': {\r\n\t\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IAddGroup>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ADD_GROUP\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.EDIT_GROUP,\r\n\t\t\t\tgroupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after update, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_GROUP,\r\n\t\t\t\tgroupId: groupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait updateGroupFromLocalStorage(group);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\t\tgroup\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n/*\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\t  resolve({\r\n\t\t\t\t 'status': 200,\r\n\t\t\t\t 'content-type': 'application/json',\r\n\t\t\t\t 'data' : {\r\n\t\t\t\t\t'results': storageQuestionsByGroups\r\n\t\t\t\t }\r\n\t\t\t  })\r\n\t\t\t}, 250)\r\n\t})\r\n}\r\n*/\r\n\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data': {\r\n\t\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// Import User Typing\r\nimport { IUser, IUserState } from './types';\r\nimport usersDemo from \"./initialData.json\"\r\n\r\nconst storageUsersDemo: IUser[] = usersDemo;\r\n\r\n// Create Action Constants\r\nexport enum UserActionTypes {\r\n\tGET_ALL_USERS = 'GET_ALL_USERS',\r\n  \tGET_USER = 'GET_USER'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: UserActionTypes.GET_ALL_USERS;\r\n\tusers: IUser[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: UserActionTypes.GET_USER;\r\n\tuser: IUser;\r\n}\r\n\r\n// localStorage\r\nexport const SUPPORT_USERS = 'SUPPORT_USERS' \r\nconst storageUsers: IUser[] = [\r\n]\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type UserActions = IGetAll | IGet;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllUsers: ActionCreator<\r\n  ThunkAction<Promise<any>, IUserState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\tconsole.log('storageUsers', storageUsers)\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sUsers = localStorage.getItem(SUPPORT_USERS);\r\n\t\t\tif (sUsers !== null) {\r\n\t\t\t\t// console.log('localStorage:', sUsers);\r\n\t\t\t\tconst Users: IUser[] = JSON.parse(sUsers);\r\n\t\t\t\tUsers.map(g => storageUsers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageUsersDemo.map(g => storageUsers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageUsersDemo.map(g => storageUsers.push(g))\r\n\t\t}\r\n\r\n\t\t//const response = await getUsersFromLocalStorage(); \r\n      dispatch({\r\n        type: UserActionTypes.GET_ALL_USERS,\r\n        users: storageUsers //response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nconst getUsersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageUsers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addUserToLocalStorage = (User: IUser): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': User\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateUserFromLocalStorage = (User: IUser): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': User\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeUserFromLocalStorage = (userId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': userId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes\r\n  //reloadQuestionsFromLocalStorage\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup, IQuestionState } from './types'\r\n\r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS';\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tanswers: [],\r\n\tcreatedBy: 0,\r\n\tcreated: new Date()\r\n };\r\n\r\n export const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: []\r\n };\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: 0,\r\n\tisDetail: false\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nconst aTypesToSTore = Object.keys(QuestionActionTypes).filter(a => a !== QuestionActionTypes.GET_ALL_QUESTIONS);\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (state, action) => {\r\n\tconst newState = myReducer(state, action);\r\n\tif (aTypesToSTore.includes(action.type)) {\r\n\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(newState));\r\n\t}\r\n\treturn newState;\r\n}\r\n\r\nconst myReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of state.questionGroups) {\r\n\t\t\t\tquestion = section.questions\r\n\t\t\t\t\t.find(question => question.questionId === action.questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\t// for (let g of groups) {\r\n\t\t\t// \tlet max = Math.max(...g.questions.map(q => q.questionId))\r\n\t\t\t// \tif (max > questionIdMax)\r\n\t\t\t// \t\tquestionIdMax = max;\r\n\t\t\t// }\r\n\t\t\tconst questionGroup = state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tconst questionId = questionGroup!.questions.length === 0 \r\n\t\t\t\t? 1\r\n\t\t\t\t: Math.max(...questionGroup!.questions.map(q => q.questionId)) + 1;\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\tconst questionGroup = state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tconst question = questionGroup!.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === action.questionId);\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  question: undefined,\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\t\t// Question answers\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION_ANSWER: {\r\n\t\t\t return {\r\n\t\t\t   ...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t\t{ ...q, answers: [...q.answers] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...q, answers: q.answers.filter(answerId => answerId !== action.answerId) }\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}   \r\n\r\n\t\tcase QuestionActionTypes.ASSIGN_QUESTION_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t  { ...g, questions: [...g.questions] } \r\n\t\t\t\t  : \r\n\t\t\t\t  { ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t  { ...q, answers: [...q.answers] } \r\n\t\t\t\t\t  : \r\n\t\t\t\t\t  { ...q, answers: [...q.answers, action.answerId] }\r\n\t\t\t\t  )\r\n\t\t\t  \t})\r\n\t\t  \t}\r\n\t  \t}   \r\n\r\n\t\tcase QuestionActionTypes.SET_IS_DETAIL: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t  \t\tisDetail: action.isDetail\r\n\t\t\t}\r\n  \t\t}   \r\n\r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tlet groupId = Math.max(...state.questionGroups.map(g => g.groupId)) + 1\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId }]\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\tconst group = state.questionGroups.find(g => g.groupId === action.groupId)\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  groupIdEditing: group!.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: 0,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ? \r\n\t\t\t\t\tg \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}    \r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions]})\r\n\t\t\t\t\treturn acc\r\n\t\t\t  \t}, [])\r\n\t\t\t};\r\n\t\t}   \t\t\r\n\t\t\t \r\n\t\t// case QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE: {\r\n\t\t// \tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(state.questionGroups));\r\n\t\t// \treloadQuestionsFromLocalStorage(JSON.stringify(state.questionGroups));\r\n\t\t// \treturn state;\r\n\t\t// }   \t\t\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n\tAnswerActions,\r\n\tAnswerActionTypes,\r\n\tSUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport { IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\toptions: [],\r\n\tcreatedBy: 0,\r\n\tcreated: new Date()\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tanswer: undefined,\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\nconst aTypesToSTore = Object.keys(AnswerActionTypes).filter(a => a !== AnswerActionTypes.GET_ALL_ANSWERS);\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (state, action) => {\r\n\tconst newState = myReducer(state, action);\r\n\tif (aTypesToSTore.includes(action.type)) {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(newState));\r\n\t}\r\n\treturn newState;\r\n}\r\n\r\nconst myReducer: Reducer<IAnswerState, AnswerActions> = (\r\n\tstate = initialAnswerState,\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase AnswerActionTypes.GET_ALL_ANSWERS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswers: action.answers.map(answer => { return { ...answer, words: answer.text.split(' ') } }),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.GET_ANSWER: {\r\n\t\t\tconst answer = state.answers.find(a => a.answerId === action.answerId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswer\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.ADD_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tanswer: {\r\n\t\t\t\t\t...initialAnswer,\r\n\t\t\t\t\tanswerId: state.answers.length === 0 \r\n\t\t\t\t\t\t? 1\r\n\t\t\t\t\t\t: Math.max(...state.answers.map(a => a.answerId)) + 1\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.EDIT_ANSWER: {\r\n\t\t\tconst answer = state.answers.find(a => a.answerId === action.answerId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tanswer: { ...answer!, words: answer!.text.split(' ') }\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\t\tconst { answer } = action;\r\n\t\t\tlet { answerId } = answer!;\r\n\t\t\tlet answers = [];\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\tif (answerId === -1)\r\n\t\t\t\t\tanswerId = state.answers.length === 0\r\n\t\t\t\t\t\t? 1\r\n\t\t\t\t\t\t: Math.max(...state.answers.map(a => a.answerId)) + 1;\r\n\t\t\t\tanswers = [...state.answers, { ...action.answer, words: answer.text.split(' ') }]\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tanswers = state.answers.map(a => a.answerId === answer.answerId\r\n\t\t\t\t\t? { ...action.answer, words: answer.text.split(' ') }\r\n\t\t\t\t\t: a)\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tanswers: answers\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display',\r\n\t\t\t\tanswers: state.answers.filter(a => a.answerId !== action.answerId)\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// case AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\t// \tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\t// \treturn state;\r\n\t\t// }   \t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  UserActions,\r\n  UserActionTypes,\r\n  SUPPORT_USERS\r\n} from './actions';\r\n\r\nimport {IUser, IUserState } from './types'\r\n\r\nconst initialUser: IUser = {\r\n\tuserId: 0,\r\n\tname: '',\r\n\trole: 'Admin',\r\n\tdepartment: 'Development'\r\n};\r\n\r\nconst initialUserState: IUserState = {\r\n\tusers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const userReducer: Reducer<IUserState, UserActions> = (\r\n  state = initialUserState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n\r\n   case UserActionTypes.GET_ALL_USERS: {\r\n\t\treturn {\r\n        ...state,\r\n        users: action.users.map(user => ({...user}) ),\r\n      };\r\n\t} \r\n\r\n \tcase UserActionTypes.GET_USER: {\r\n      return {\r\n\t\t  ...state,\r\n        user: action.user\r\n      };\r\n\t}    \r\n\r\n\tdefault:\r\n   \t\treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { questionReducer } from '../Questions/reducer';\r\nimport { answerReducer } from '../Answers/reducer';\r\n\r\nimport { IAnswerState } from '../Answers/types';\r\nimport { IQuestionState } from '../Questions/types';\r\nimport { IUserState } from '../user/types';\r\nimport { userReducer } from '../user/reducer';\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n  userState: IUserState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer,\r\n  userState: userReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\nimport { createRef, RefObject } from 'react'\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\nlet inputAutosuggest = createRef<HTMLInputElement>();\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], tekst: string, onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t//inputAutosuggest: React.RefObject<HTMLInputElement>;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvalue: props.tekst || '',\r\n\t\t\tsuggestions: this.getSuggestions(''),\r\n\t\t\thighlighted: ''\r\n\t\t};\r\n\t\t//this.inputAutosuggest = createRef<HTMLInputElement>();\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tsetTimeout(() => {\r\n\t\t\t//inputAutosuggest!.current!.focus();\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\twindow.focus()\r\n\t\t\t\tinputAutosuggest!.current!.focus();\r\n\t\t\t}, 500)\r\n\r\n\t}, 100)\r\n\r\n\t\t// console.log('componentDidMount', document)\r\n\t\t// console.log(document?.getElementById('inputAutoSuggest'))\r\n\t\t//document?.getElementById('inputAutoSuggest')?.focus(); \r\n\t}\r\n\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent)\r\n\t\t\t  }}\r\n\r\n\t\t\t  />;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.RenderInputComponentProps): JSX.Element {\r\n\t\tconst { ref, ...restInputProps } = inputProps;\r\n\t\t// if (ref !== undefined)\r\n\t\t// \tthis.inputAutosuggest = ref as React.RefObject<HTMLInputElement>;\r\n\t\treturn (\r\n\t\t\t <div>\r\n\t\t\t\t   <input {...restInputProps} ref={inputAutosuggest}/>\r\n\t\t\t </div>\r\n\t\t);\r\n   }\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\t\r\n\tprotected onChange(event: /*React.ChangeEvent<HTMLInputElement>*/ React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\tthis.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\nimport { IAnswer }  from '../Answers/types'\r\nimport './AutoSuggest.css'\r\nimport { IQuestion } from '../Questions/types';\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IAnswer> };\r\n\r\ninterface IProps {\r\n\tanswersUnassigned: IAnswer[], \r\n\tquestion: IQuestion,\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void\r\n\tsetAnswerText?: (val: string) => void\r\n}\r\n\r\nexport class AutoSuggestAnswer extends React.Component<IProps, any> {\r\n\r\n\tstate: any;\r\n\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={false}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'contact'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IAnswer>): void {\r\n\t\t const answer: IAnswer = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.answerId} (${question.text}).`);\r\n\t\t this.props.assignQuestionAnswer(\r\n\t\t\t this.props.question.groupId,\r\n\t\t\t this.props.question.questionId, \r\n\t\t\t answer.answerId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IAnswer, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IAnswer>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\tif (this.props.setAnswerText) {\r\n\t\t\tthis.props.setAnswerText(newValue);\r\n\t\t}\r\n\t\tthis.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IAnswer[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\treturn this.props.answersUnassigned.filter(answer => this.anyWord(valueWordRegex, answer.words!))\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IAnswer) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AutoSuggestAnswer } from '../../components/AutoSuggestAnswer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tanswers?: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string,\r\n\tremoveQuestionAnswer?: (groupId: number, questionId: number, answerId: number) => void,\r\n\tassignQuestionAnswer?: (groupId: number, questionId: number, answerId: number, tekst?: string) => void,\r\n\tsetAnswerText?: (val: string) => void,\r\n\tsetIsDetail: (isDetail: boolean) => void\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n\tconst { \r\n\t\tquestion, \r\n\t\tquestionAnswers, \r\n\t\tanswers, \r\n\t\tcanEdit, \r\n\t\tformMode, \r\n\t\tremoveQuestionAnswer, assignQuestionAnswer, setIsDetail \r\n\t} = props; \r\n\tconst answersUnassigned = answers?.filter(a => !question.answers.includes(a.answerId))\r\n\r\n\tconst [tekst, setTekst] = React.useState('');\r\n\tconst setAnswerText = (val: string) => {\r\n\t\tsetTekst(val);\r\n\t}\r\n\r\n\tconst assignQuestionAnswerTekst = () => {\r\n\t\tif (assignQuestionAnswer) {\r\n\t\t\t//storeAnswer({ answerId: -1, text: tekst }, 'add')\r\n\t\t\tassignQuestionAnswer(\r\n\t\t\t\tquestion.groupId,\r\n\t\t\t\tquestion.questionId, \r\n\t\t\t\t-1,\r\n\t\t\t\ttekst\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tconst goDetail = (isDetail: boolean) => {\r\n\t\tsetIsDetail(isDetail);\r\n\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.add('detail-view-open');\r\n\t\tdivDetailView!.style.zIndex = '3';\r\n\t\t//document.body.classList.add('hide-scroll-bar');\r\n  \t}\t\r\n\r\n\r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{/* { questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t} */}\r\n\t\t\t{ questionAnswers.length > -1 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>{ questionAnswers.length === 0 ? 'No answers yet' : 'Answers'}</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => { \r\n\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer!(question.groupId, question.questionId, answer.answerId)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{canEdit && formMode !== 'display' && <tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<AutoSuggestAnswer\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tanswersUnassigned={answersUnassigned!}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer!}\r\n\t\t\t\t\t\t\t\t\tsetAnswerText={setAnswerText}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => goDetail(true)}>\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPlus} color='lightblue' />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from \"react\";\r\n\r\ntype OptionValue = string | number;\r\n\r\nexport type Option<T extends OptionValue> = {\r\n    value: T;\r\n    label: string;\r\n};\r\n\r\ntype Props<T extends OptionValue> = {\r\n    options: Option<T>[];\r\n    value: T;\r\n    onChange: (value: T) => void;\r\n    id: string\r\n};\r\n\r\nexport function Select<T extends OptionValue>(props: Props<T>) {\r\n\r\n    function handleOnChange(e: React.FormEvent<HTMLSelectElement>) {\r\n        const { selectedIndex } = e.currentTarget;\r\n        const selectedOption = props.options[selectedIndex];\r\n        props.onChange(selectedOption.value);\r\n    }\r\n\r\n    console.log('====>>>> props.options', props.options)\r\n    return (\r\n        <select value={props.value} onChange={handleOnChange}>\r\n            {props.options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                    {option.label}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    );\r\n}","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\nimport { Select } from '../../common/Select';\r\nimport { Option } from '../../common/Select'\r\n\r\ninterface IProps {\r\n  question: IQuestion;\r\n  questionAnswers: IAnswer[];\r\n  answers: IAnswer[];\r\n  formMode: string;\r\n  canEdit: boolean,\r\n  cancel: () => void;\r\n  saveForm: (question: IQuestion, formMode: string) => void;\r\n  removeQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  assignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  setIsDetail: (isDetail: boolean) => void;\r\n  userOptions: Option<number>[];\r\n}\r\n\r\nexport const Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      groupId: props.question.groupId,\r\n      questionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers,\r\n      createdBy: props.question.createdBy,\r\n      created: props.question.created,\r\n      userOptions: props.userOptions\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      props.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n\r\n        <label htmlFor=\"text\"></label>\r\n        <input\r\n          id=\"questionId\"\r\n          name=\"questionId\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.questionId}\r\n          disabled\r\n          style={{ width: '50px' }}\r\n        />\r\n        {formik.touched.questionId && formik.errors.questionId ? (\r\n          <div>{formik.errors.questionId}</div>\r\n        ) : null}\r\n\r\n        <label htmlFor=\"text\"></label>\r\n        <input\r\n          id=\"text\"\r\n          name=\"text\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.text}\r\n          multiple\r\n        />\r\n        {formik.touched.text && formik.errors.text ? (\r\n          <div>{formik.errors.text}</div>\r\n        ) : null}\r\n\r\n        <label htmlFor=\"createdBy\">Created by</label>\r\n        <Select\r\n          id=\"createdBy\"\r\n          options={formik.values.userOptions}\r\n          onChange={formik.handleChange}\r\n          value={formik.values.createdBy}\r\n        // onChange={(gradeId: number) =>\r\n        // \tdispatch({\r\n        // \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n        // \t\tstudentGradeIds: {\r\n        // \t\t\tstudentId: student!.id,\r\n        // \t\t\tgradeId: gradeId,\r\n        // \t\t\tgradeName: gradesAll[gradeId].name\r\n        // \t\t}\r\n        // \t})\r\n        // }\r\n        />\r\n\r\n\r\n        {/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n        {/* <button type=\"submit\">Submit</button> */}\r\n        {props.canEdit &&\r\n          <button onClick={() => props.cancel()}>Cancel</button>}\r\n        {props.canEdit &&\r\n          <button type=\"submit\">Save</button>}\r\n      </form>\r\n\r\n      <br />\r\n      <QuestionAnswers\r\n        question={props.question}\r\n        questionAnswers={props.questionAnswers}\r\n        answers={props.answers}\r\n        canEdit={props.canEdit}\r\n        formMode={props.formMode}\r\n        removeQuestionAnswer={props.removeQuestionAnswer}\r\n        assignQuestionAnswer={props.assignQuestionAnswer}\r\n        setIsDetail={props.setIsDetail}\r\n      />\r\n    </>\r\n  );\r\n};","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tanswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tedit: () => void;\r\n\tremove: () => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void; \r\n  setIsDetail: (isDetail: boolean) => void;\r\n }\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers\r\n\t\t\tquestion={props.question}\r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n      setIsDetail={props.setIsDetail}\r\n\t\t/>\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.edit()}>Edit</button>\r\n\t\t\t<button onClick={() => props.remove()}>Remove</button>\r\n\t\t\t</>\r\n\t\t}\r\n    </form>\r\n  );\r\n};","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n \r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\tconst { groupId, questionId } = question;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && \r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit\" onClick={() => edit(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove\" onClick={() => remove(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, editGroup, removeGroup } = props;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} key={questionGroup.groupId} className=\"name\" >\r\n\t\t\t<span className='question-group-title'>{questionGroup.title}</span>\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\t\t\t\r\n\t\t\t{hoverProps.isHovered && questionGroup.questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","const palx = require('palx');\r\nexport const BASE_COLOR = '#666ee8';\r\nexport const COLORS = palx(BASE_COLOR);","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\nimport { COLORS } from '../../formik/theme';\r\nimport { Select } from '../../common/Select';\r\nimport { IUser } from '../../user/types';\r\nimport { Option } from '../../common/Select'\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n\tuserOptions: Option<number>[];\r\n}\r\n\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t  enableReinitialize: true,\r\n\t  initialValues: {\r\n\t\t  fromMode: props.formMode,\r\n\t\t  answerId: props.answer.answerId,\r\n\t\t  text: props.answer.text,\r\n\t\t  options: props.answer.options,\r\n\t\t  createdBy: props.answer.createdBy,\r\n\t\t  created: props.answer.created,\r\n\t\t  userOptions: props.userOptions\r\n\t  },\r\n\t  validationSchema: Yup.object({\r\n\t\t  text: Yup.string()\r\n\t\t\t  .max(150, 'Must be 150 characters or less')\r\n\t\t\t  .required('Required'),\r\n\t  }),\r\n\t  onSubmit: (values) => {\r\n\t\t  // alert(JSON.stringify(values, null, 2));\r\n\t\t  props.saveForm(values, props.formMode)\r\n\t  },\r\n  });\r\n\r\n  \r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\t\tid=\"answerId\"\r\n\t\t\t\tname=\"answerId\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\tvalue={formik.values.answerId}\r\n\t\t\t\tdisabled\r\n\t\t\t\tstyle={{width: '50px'}}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n\t\t<label htmlFor=\"text\">Resolution</label>\r\n\t\t<input\r\n\t\t\tid=\"text\"\r\n\t\t\tname=\"text\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.text}\r\n\t\t/>\r\n\t\t{formik.touched.text && formik.errors.text ? (\r\n\t\t\t<div>{formik.errors.text}</div>\r\n\t\t) : null}\r\n\r\n\t\t<label htmlFor=\"createdBy\">Created by</label>\r\n\t\t<Select\r\n\t\t\tid=\"createdBy\"\r\n\t\t\toptions={formik.values.userOptions}\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tvalue={formik.values.createdBy}\t\t\r\n\t\t\t// onChange={(gradeId: number) =>\r\n\t\t\t// \tdispatch({\r\n\t\t\t// \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n\t\t\t// \t\tstudentGradeIds: {\r\n\t\t\t// \t\t\tstudentId: student!.id,\r\n\t\t\t// \t\t\tgradeId: gradeId,\r\n\t\t\t// \t\t\tgradeName: gradesAll[gradeId].name\r\n\t\t\t// \t\t}\r\n\t\t\t// \t})\r\n\t\t\t// }\r\n\t\t/>\r\n\r\n\t\t<label htmlFor=\"created\">Created</label>\r\n\t\t<input\r\n\t\t\tid=\"created\"\r\n\t\t\tname=\"text\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.created.toLocaleDateString()}\r\n\t\t/>\r\n\t\t{formik.touched.created && formik.errors.created ? (\r\n\t\t\t<div>{formik.errors.created}</div>\r\n\t\t) : null}\r\n\t\t\r\n\t\t  {/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n    \t<button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst color = 'blue';\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n\treturn (\r\n\t\t<div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\theight: '100%',\r\n\t\t\tbackground: COLORS[color][5],\r\n\t\t\tpadding: '4rem 2rem',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tborderRadius: '4px',\r\n\t\t\t\tboxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n\t\t\t\tbackground: '#fff',\r\n\t\t\t\tmaxWidth: 400,\r\n\t\t\t\tmargin: '0 auto',\r\n\t\t\t\tpadding: '2rem',\r\n\t\t\t}}\r\n\t\t\t>\r\n\t\t\t<div className=\"formik-example formik-example--blue\">\r\n\t\t\t\t<Form {...props} />\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</div>\t\r\n\t)\r\n}","import React, { useState, useEffect } from 'react'\r\n\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AnswerForm } from '../../Answers/components/Form'\r\nimport { Option } from '../../common/Select'\r\n\r\ninterface IProps {\r\n\tstoreNewAnswer: (answer: IAnswer, formMode: string) => void,\r\n\tuserOptions: Option<number>[];\r\n}\r\n\r\n//export default function DetailView() {\r\nexport const DetailView: React.FC<IProps> = (props: IProps) => {\r\n\r\n\t// const complete = ({name}) => dispatch({ type: 'TOGGLE', name: 'new Todo' })\r\n\r\n\tuseEffect(()=> {\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.addEventListener('animationend', () => {\r\n\t\t\tif (divDetailView!.classList.contains('detail-view-close')) {\r\n\t\t\t\tdivDetailView!.style.zIndex = '0';\r\n\t\t\t\tdivDetailView!.style.left = '100%';\r\n\t\t\t\tdivDetailView!.classList.remove('detail-view-close');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdivDetailView!.style.left = '60%';\r\n\t\t\t}\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst close = () => {\r\n\t\t// dispatch({ type: 'GO_BACK', page: \"LIST_PAGE\" })\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.remove('detail-view-open');\r\n\t\tdivDetailView!.classList.add('detail-view-close');\r\n\r\n\t\t//document.body.classList.remove('hide-scroll-bar');\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id=\"divDetailView\" className=\"detail-view\">\r\n\t\t\t{/* <div onClick={complete}>{todo.name}</div> */}\r\n\t\t\t<button style={{position: 'absolute', right:'10px'}} onClick={close}>X</button>\r\n\t\t\t<h2>New Answer</h2>\r\n\t\t\t<div style={{width: '100%', border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t<AnswerForm\r\n\t\t\t\t\tanswer={{\r\n\t\t\t\t\t\tanswerId: -1, \r\n\t\t\t\t\t\ttext: 'argh',\r\n\t\t\t\t\t\tcreatedBy: 0,\r\n\t\t\t\t\t\tcreated: new Date()\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tformMode='add'\r\n\t\t\t\t\tcancel={()  => {}}\r\n\t\t\t\t\tsaveForm={(answer: IAnswer) => props.storeNewAnswer(answer, 'add')} \r\n\t\t\t\t\tuserOptions={props.userOptions}\r\n\t\t\t\t/>\r\n\t\t\t</div>\t\t\t\t\r\n\t\t</div>\r\n\t)\r\n}","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\nimport { DetailView } from './DetailView';\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\taddGroup, editGroup, removeGroup, storeGroup,\r\n\t\t\tremoveQuestionAnswer, assignQuestionAnswer,\r\n\t\t\tsetIsDetail, isDetail, storeNewAnswer,\r\n\t\t\tuserOptions } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t {\r\n\t\t\tinputEl.current!.select();\r\n\t\t\tinputEl.current!.focus()\r\n\t\t}\r\n\t}, 100)\r\n\r\n\r\n    return (\r\n\t   <>\r\n\t\t\t<div className=\"name-container\">\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<AutoSuggest \r\n\t\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<hr />\r\n\r\n\t\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing === questionGroup.groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={questionGroup.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== questionGroup.groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '10px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={question.questionId}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\t\tAdd a new Section\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<DetailView storeNewAnswer={storeNewAnswer} userOptions={userOptions} />\t{/* visible={isDetail} */}\r\n\t  </>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IQuestion, IComponentProps } from '../types';\r\n\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n  \r\nconst PromoterPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, onSelectQuestion, cancel, saveForm, canEdit,\r\n\t\tremoveQuestionAnswer, assignQuestionAnswer, setIsDetail, storeNewAnswer,\r\n\t\tuserOptions } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t{/* Support Page tekst: {tekst} */}\r\n\t\t\t\t\t<AutoSuggest\r\n\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\tonSelectQuestion={onSelectQuestion} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default PromoterPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup,\r\n\tremoveQuestionAnswer,\r\n\tassignQuestionAnswer,\r\n\tsetIsDetail,\r\n\tstoreNewAnswer\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport PromoterPage from '../components/PromoterPage'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionState.questionGroups,\r\n\t\tquestion: store.questionState.question!,\r\n\t\tquestionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionState.formMode,\r\n\t\tgroupIdEditing: store.questionState.groupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t\tisDetail: store.questionState.isDetail,\r\n\t\tuserOptions: store.userState.users.map(user => ({ label: user.name, value: user.userId }))\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group)),\r\n\r\n\t\t// question answers\r\n\t\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(removeQuestionAnswer(groupId, questionId, answerId)),\r\n\r\n\t\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId)),\r\n\t\t\r\n\t\tsetIsDetail: (isDetail: boolean) => {\r\n\t\t\tdispatch<any>(setIsDetail(isDetail))\r\n\t\t},\r\n\r\n\t\tstoreNewAnswer: (answer: IAnswer, formMode: string) => {\r\n\t\t\tdispatch<any>(storeNewAnswer(answer, formMode))\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(PromoterPage)\r\n};","import * as React from 'react';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <h5 style={{textAlign: 'center'}}>A knowledge base is a great tool for sharing information. \n        <br/> When you record your experiences and insights regularly, \n        <br/>other members of your team reap the rewards.\n      </h5>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer,\r\n\tusedAnswers: number[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nexport const ListRow: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answer, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<tr key={answer.answerId} >\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.answerId}\r\n\t\t\t</td>\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.text}\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\ttitle=\"Add a new Answer\"\r\n\t\t\t\t\tonClick={() => edit(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button \r\n\t\t\t\t\tdisabled={usedAnswers.includes(answer.answerId)}\r\n\t\t\t\t\tclassName=\"button-remove\"\r\n\t\t\t\t\ttitle=\"Remove Answer\"\r\n\t\t\t\t\tonClick={() => remove(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t);\r\n  }\r\n\r\n","import * as React from 'react';\r\n\r\nimport { IAnswer } from '../types';\r\nimport { ListRow } from './ListRow';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tusedAnswers: number[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nconst List: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answers, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<table>\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t<ListRow\r\n\t\t\t\t\t\tkey={answer.answerId}\r\n\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\tusedAnswers={usedAnswers}\r\n\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t);\r\n  }\r\n\r\nexport default List\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\nimport { ListRow } from './ListRow';\r\nimport List from './List';\r\nimport { Option } from '../../common/Select'\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer,\r\n\tusedAnswers: number[],\r\n\tuserOptions: Option<number>[];\r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n\t\r\n}\r\n\r\ntype MyParams = {\r\n\tslug: string;\r\n  };\r\n\r\nconst Page: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams<MyParams>();\r\n\t// slug = ''\r\n\tconst { answers, answer, usedAnswers, formMode, add, edit, remove, cancel, saveForm, userOptions } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<List answers={answers} usedAnswers={usedAnswers} edit={edit} remove={remove} />\r\n\t\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm \r\n\t\t\t\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(answer: IAnswer) => saveForm(answer, formMode)} \r\n\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm\r\n\t\t\t\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(answer: IAnswer) => saveForm(answer, formMode)}\r\n\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Page\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Page from '../components/Page'\r\nimport { IQuestionGroup } from '../../Questions/types';\r\n\r\nconst getUsedAnswers = (questionGroups: IQuestionGroup[]) : number[]=> {\r\n\tlet answerIds: number[] = [];\r\n\tfor (let group of questionGroups)\r\n\t\tfor (let question of group.questions)\r\n\t\t\tanswerIds = answerIds.concat(question.answers)\r\n\treturn answerIds;\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\tanswers: store.answerState.answers,\r\n\tanswer: store.answerState.answer!,\r\n\tformMode: store.answerState.formMode,\r\n\tusedAnswers: getUsedAnswers(store.questionState.questionGroups),\r\n\tuserOptions: store.userState.users.map(user => ({ label: user.name, value: user.userId }))\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","import React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { Store } from 'redux';\r\n\r\nimport configureStore, { IAppState } from './store/Store';\r\nimport { getAllQuestions } from './Questions/actions';\r\nimport { getAllAnswers, SUPPORT_ANSWERS } from './Answers/actions';\r\n\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nimport App from './components/App';\r\nimport AnswersPage from './Answers/containers/Page'\r\nimport containers from './Questions/containers/Pages'\r\n\r\nimport './formik/formikStyles.css';\r\nimport { css } from 'glamor';\r\nimport { COLORS } from './formik/theme';\r\nimport { getAllUsers } from './user/actions';\r\nconst { base, black, ...cols } = COLORS;\r\n\r\nfunction getQueryStringParams(paramName: string) : string {\r\n\tlet searchParams = new URLSearchParams(window.location.search.substring(1));\r\n\tsearchParams.forEach(p => console.log(p))\r\n\tconst s =  searchParams.get(paramName) || '';\r\n\treturn s;\r\n}\r\n\r\n//const tekst = getQueryStringParams('tekst');\r\n\r\n// Cool example colors.\r\nObject.keys(cols).forEach(color => {\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit'],\r\n\t.formik-example.formik-example--${color} button.primary`,\r\n\t  {\r\n\t\t background: COLORS[color][5],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:focus,\r\n\t  .formik-example.formik-example--${color} button.primary:focus`,\r\n\t  {\r\n\t\t background: COLORS[color][6],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:active,\r\n\t  .formik-example.formik-example--${color} button.primary:active`,\r\n\t  {\r\n\t\t background: COLORS[color][7],\r\n\t  }\r\n\t);\r\n \r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} input:focus, .formik-example.formik-example--${color} select:focus`,\r\n\t  {\r\n\t\t borderColor: COLORS[color][4],\r\n\t\t boxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 0 3px ${COLORS[color][1]}`,\r\n\t\t outline: 'none',\r\n\t  }\r\n\t);\r\n });\r\n\r\n\r\ninterface IProps {\r\n\tstore: Store<IAppState>;\r\n}\r\n\r\n// <Router basename={'/'}>\r\nconst Root: React.SFC<IProps> = props => {\r\n\treturn (\r\n\t\t<Provider store={props.store} >\r\n\t\t\t<Router basename={'/'}>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/supporter/promo\">Supporter</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li  className=\"push-right\">\r\n\t\t\t\t\t\t\t<Link to=\"/answers/sima\">Sign In</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\t\t\t\t\t\r\n\t\t\t\t</nav>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t{/* exact */}\r\n\t\t\t\t\t\t<Route exact path=\"/supporter/:tekst?\">\r\n\t\t\t\t\t\t\t{<App />}\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/questions\">\r\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\r\n\t\t\t\t\t\t\t<AnswersPage />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{/* <Route\r\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\r\n\t\t\t\t\t\t\trender={({ match }) => {\r\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\r\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\t\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\n\r\n// Generate the store\r\nlocalStorage.clear(); // !!!!!!!!!!!!\r\n\r\nconsole.log('sQuestions PRE', localStorage.getItem('SUPPORT_QUESTIONS'))\r\n\r\nconst store = configureStore();\r\nstore.dispatch(getAllQuestions());\r\nstore.dispatch(getAllAnswers());\r\nstore.dispatch(getAllUsers())\r\n\r\nconsole.log('sQuestions POSLE', localStorage.getItem('SUPPORT_QUESTIONS'))\r\n\r\n// Render the App\r\n// ReactDOM.render(<Root store={store} />, document.getElementById(\r\n//   'root'\r\n// ) as HTMLElement);\r\n\r\n// React.StrictMode\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t  <Root store={store} />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root') \r\n  );"],"sourceRoot":""}