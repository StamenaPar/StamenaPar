{"version":3,"sources":["Answers/actions.ts","Questions/actions.ts","user/actions.ts","Questions/reducer.ts","Answers/reducer.ts","user/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/AutoSuggestAnswer.tsx","Questions/components/QuestionAnswers.tsx","common/Select.tsx","formik/theme.js","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","common/useHover.tsx","Questions/components/QuestionRow.tsx","Questions/components/GroupRow.tsx","Answers/components/Form.tsx","Questions/components/DetailView.tsx","issueSource/sourceOptions.ts","issueStatus/statusOptions.ts","Questions/components/QuestionsPage.tsx","Questions/components/SuportPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","Answers/components/ListRow.tsx","Answers/components/List.tsx","Answers/components/Page.tsx","Answers/containers/Page.tsx","index.tsx"],"names":["AnswerActionTypes","getInitial","data","map","a","created","Date","SUPPORT_ANSWERS","QuestionActionTypes","addAnswer","dispatch","type","ADD_ANSWER","err","console","error","storeAnswer","answer","formMode","getState","STORE_ANSWER","Promise","resolve","answerState","answerId","getFromInitial","g","questions","q","answers","assigned","UserActionTypes","getQuestion","questionId","GET_QUESTION","assignQuestionAnswer","groupId","tekst","delay","ASSIGN_QUESTION_ANSWER","reject","setTimeout","SUPPORT_QUESTIONS","initialQuestion","text","words","source","status","createdBy","initialQuestionGroup","title","initialQuestionsState","questionGroups","question","undefined","loading","groupIdEditing","isDetail","aTypesToSTore","Object","keys","filter","GET_ALL_QUESTIONS","myReducer","state","action","section","split","f","find","ADD_QUESTION","questionGroup","length","Math","max","EDIT_QUESTION","STORE_QUESTION","CANCEL_QUESTION","REMOVE_QUESTION","REMOVE_QUESTION_ANSWER","qa","assignedBy","SET_IS_DETAIL","ADD_GROUP","EDIT_GROUP","group","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","initialAnswer","options","initialAnswerState","GET_ALL_ANSWERS","GET_ANSWER","EDIT_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","storageUsersDemo","storageUsers","initialUserState","users","rootReducer","combineReducers","questionsState","newState","includes","localStorage","setItem","JSON","stringify","userState","GET_ALL_USERS","user","GET_USER","inputAutosuggest","createRef","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","window","focus","current","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderInputComponent","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","ref","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","AutoSuggestAnswer","setAnswerText","answersUnassigned","QuestionAnswers","questionAnswers","canEdit","removeQuestionAnswer","setIsDetail","setTekst","width","toLocaleDateString","toLocaleTimeString","onClick","stopPropagation","preventDefault","icon","faWindowClose","color","val","divDetailView","document","getElementById","classList","add","style","zIndex","goDetail","faPlus","Select","disabled","id","selectedIndex","currentTarget","selectedOption","option","label","COLORS","require","palx","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","name","handleChange","onBlur","handleBlur","rows","touched","errors","sourceOptions","statusOptions","userOptions","cancel","QuestionForm","height","background","padding","borderRadius","boxShadow","maxWidth","margin","edit","remove","DisplayForm","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","addEventListener","removeEventListener","QuestionRow","hoverRef","faEdit","GroupRow","editGroup","removeGroup","AnswerForm","DetailView","addAndAssignNewAnswer","lastAnswer","contains","left","close","position","right","border","marginTop","QuestionsPage","useParams","addGroup","storeGroup","inputEl","select","textAlign","paddingBottom","target","defaultValue","marginLeft","SupportPage","mapStateToProps","store","ownProps","sort","b","userId","mapDispatchToProps","questionGroupId","editQuestion","removeQuestion","storeQuestion","then","log","connect","promoter","App","marginBlockStart","marginBlockEnd","ListRow","usedAnswers","List","Page","slug","getUsedAnswers","concat","editAnswer","removeAnswer","cols","base","black","forEach","css","global","borderColor","outline","Root","basename","to","exact","path","clear","createStore","applyMiddleware","thunk","sQuestions","getItem","parse","sAnswers","sUsers","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3d1f3c9a.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './types';\r\n\r\nimport data from \"./data.json\"\r\nimport { QuestionActionTypes } from '../Questions/actions';\r\nimport { getJSDocTemplateTag } from 'typescript';\r\nimport { IAppState } from '../store/Store';\r\nconst getInitial = (): IAnswer[] => {\r\n\treturn data.map(a => ({...a, created: new Date(a.created)}))\r\n}\r\n\r\n// localStorage\r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS';\r\n \r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n\tassignToQuestion?: boolean\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tlet answers: IAnswer[] = [];\r\n\t\t\tif (isWebStorageSupported()) {\r\n\t\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\t\tconsole.log('SAnswers',  sAnswers)\r\n\t\t\t\tif (sAnswers !== null) {\r\n\t\t\t\t\tanswers = JSON.parse(sAnswers)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tanswers = getInitial()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tanswers = getInitial()\r\n\t\t\t}\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.GET_ALL_ANSWERS,\r\n\t\t\t\tanswers\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.GET_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.EDIT_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.REMOVE_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAppState, null, IStore>\r\n> = (answer: IAnswer, formMode: string) => {\r\n\treturn async (dispatch: Dispatch, getState: () => IAppState ): Promise<any> => {\r\n\t\ttry {\r\n\t\t\tif (formMode === 'add') {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\t\tanswer\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.resolve(getState().answerState.answer!.answerId)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\t\tanswer\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\n// const addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n// \treturn new Promise((resolve, reject) => {\r\n// \t\tsetTimeout(() => {\r\n// \t\t\tresolve({\r\n// \t\t\t\t'status': 200,\r\n// \t\t\t\t'content-type': 'application/json',\r\n// \t\t\t\t'data' : {\r\n// \t\t\t\t'results': answer\r\n// \t\t\t\t}\r\n// \t\t\t})\r\n// \t\t}, 50)\r\n// \t})\r\n// }\r\n\r\n","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup, IQuestionsState } from './types';\r\n\r\nimport { addAnswer, AnswerActionTypes, storeAnswer } from '../Answers/actions'\r\nimport { IAnswer, IAnswerState } from '../Answers/types';\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\nimport { SUPPORT_QUESTIONS } from './reducer';\r\n\r\nimport data from \"./data.json\"\r\nconst getFromInitial = () : IQuestionGroup[] =>  {\r\n\treturn data.map(g => ({\r\n\t\t...g,\r\n\t\tquestions: g.questions.map(q => ({ \r\n\t\t\t...q,\r\n\t\t\tanswers: q.answers.map(a => ({...a, assigned: new Date(a.assigned)})),\r\n\t\t\tcreated: new Date(q.created)\r\n\t\t}))\r\n\t}));\r\n}\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\r\n\t// question answers\r\n\tREMOVE_QUESTION_ANSWER = 'REMOVE_QUESTION_ANSWER',\r\n\tASSIGN_QUESTION_ANSWER = 'ASSIGN_QUESTION_ANSWER',\r\n\t// localSTorage\r\n\tSET_IS_DETAIL = 'SET_IS_DETAIL',\r\n\tSET_LAST_ANSWER_ID = 'SET_LAST_ANSWER_ID'\r\n}\r\n\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n\tquestionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestionId: number;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number\r\n\t//questionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\t//groupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\n\r\n// question answers\r\nexport interface IRemoveQuestionAnswer {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\nexport interface IAssignQuestionAnswer {\r\n\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number,\r\n\ttekst?: string\r\n}\r\n\r\nexport interface ISetIsDetail {\r\n\ttype: QuestionActionTypes.SET_IS_DETAIL;\r\n\tisDetail: boolean\r\n}\r\n\r\nexport interface IAddAndAssignNewAnswer {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswer: IAnswer;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\tIAddGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\tIRemoveQuestionAnswer | IAssignQuestionAnswer |\r\n\tISetIsDetail | \r\n\tIAddAndAssignNewAnswer;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\nexport const addAndAssignNewAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IStore>\r\n> = (groupId: number, questionId: number, answer: IAnswer, formMode: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch<any>(addAnswer());\r\n\t\t\tdispatch<any>(storeAnswer(answer, formMode))\r\n\t\t\t\t.then((answerId: number) => {\r\n\t\t\t\t\tconsole.log('answerId', answerId)\r\n\t\t\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId))\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t} \r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IGetAll>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tlet questionGroups: IQuestionGroup[] = [];\r\n\t\t\tif (isWebStorageSupported()) {\r\n\t\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\t\tconsole.log('sQuestions', sQuestions)\r\n\t\t\t\tif (sQuestions !== null) {\r\n\t\t\t\t\tquestionGroups = JSON.parse(sQuestions)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tquestionGroups = getFromInitial();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tquestionGroups = getFromInitial();\r\n\t\t\t}\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n\t\t\t\tquestionGroups\r\n\t\t\t});\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, string, IGet>\r\n> = (questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IAdd>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ADD_QUESTION,\r\n\t\t\t\tgroupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.EDIT_QUESTION,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t\t\tgroupId: groupId,\r\n\t\t\t\tquestionId: questionId,\r\n\t\t\t\tanswerId: answerId,\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const assignQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number, tekst?: string) => {\r\n\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay();\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const setIsDetail: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, ISetIsDetail>\r\n> = (isDetail: boolean) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.SET_IS_DETAIL,\r\n\t\t\t\tisDetail\r\n\t\t\t});\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const storeQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tif (formMode === 'add') {\r\n\t\t\t\tawait delay();\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\t\tquestion: question,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tawait delay();\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\t\tquestion\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data': {\r\n\t\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IAddGroup>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ADD_GROUP\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.EDIT_GROUP,\r\n\t\t\t\tgroupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after update, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_GROUP,\r\n\t\t\t\tgroupId: groupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\t// await updateGroupFromLocalStorage(group);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\t\tgroup\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n/*\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\t  resolve({\r\n\t\t\t\t 'status': 200,\r\n\t\t\t\t 'content-type': 'application/json',\r\n\t\t\t\t 'data' : {\r\n\t\t\t\t\t'results': storageQuestionsByGroups\r\n\t\t\t\t }\r\n\t\t\t  })\r\n\t\t\t}, 250)\r\n\t})\r\n}\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data': {\r\n\t\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n*/\r\n","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// Import User Typing\r\nimport { IUser, IUserState } from './types';\r\nimport data from \"./data.json\"\r\nconst storageUsersDemo: IUser[] = data;\r\n\r\n// Create Action Constants\r\nexport enum UserActionTypes {\r\n\tGET_ALL_USERS = 'GET_ALL_USERS',\r\n  \tGET_USER = 'GET_USER'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: UserActionTypes.GET_ALL_USERS;\r\n\tusers: IUser[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: UserActionTypes.GET_USER;\r\n\tuser: IUser;\r\n}\r\n\r\n// localStorage\r\nexport const SUPPORT_USERS = 'SUPPORT_USERS' \r\nconst storageUsers: IUser[] = [\r\n]\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type UserActions = IGetAll | IGet;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllUsers: ActionCreator<\r\n  ThunkAction<Promise<any>, IUserState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sUsers = localStorage.getItem(SUPPORT_USERS);\r\n\t\t\tif (sUsers !== null) {\r\n\t\t\t\tconst Users: IUser[] = JSON.parse(sUsers);\r\n\t\t\t\tUsers.map(g => storageUsers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageUsersDemo.map(g => storageUsers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageUsersDemo.map(g => storageUsers.push(g))\r\n\t\t}\r\n\r\n\t\t//const response = await getUsersFromLocalStorage(); \r\n      dispatch({\r\n        type: UserActionTypes.GET_ALL_USERS,\r\n        users: storageUsers //response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\n// const getUsersFromLocalStorage = (): Promise<any> => {\r\n// \treturn new Promise((resolve, reject) => {\r\n// \t\tsetTimeout(() => {\r\n//   \t\t  resolve({\r\n//   \t\t\t 'status': 200,\r\n//   \t\t\t 'content-type': 'application/json',\r\n//   \t\t\t 'data' : {\r\n//   \t\t\t\t'results': storageUsers\r\n//   \t\t\t }\r\n//   \t\t  })\r\n//   \t\t}, 50)\r\n//   \t })\r\n//   }\r\n\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes\r\n  //reloadQuestionsFromLocalStorage\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup, IQuestionsState } from './types'\r\n\r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS';\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tsource: 0,\r\n\tstatus: 0,\r\n\tanswers: [],\r\n\tcreatedBy: 0,\r\n\tcreated: new Date()\r\n };\r\n\r\n export const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: []\r\n };\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionsState: IQuestionsState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: 0,\r\n\tisDetail: false\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nconst aTypesToSTore = Object.keys(QuestionActionTypes)\r\n\t\t\t\t\t\t.filter(a => a !== QuestionActionTypes.GET_ALL_QUESTIONS);\r\n\r\nexport const questionReducer: Reducer<IQuestionsState, QuestionActions> = (state, action) => {\r\n\tconst newState = myReducer(state, action);\r\n\tif (aTypesToSTore.includes(action.type)) {\r\n\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(newState.questionGroups));\r\n\t}\r\n\treturn newState;\r\n}\r\n\r\nconst myReducer: Reducer<IQuestionsState, QuestionActions> = (\r\n  state = initialQuestionsState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of state.questionGroups) {\r\n\t\t\t\tquestion = section.questions\r\n\t\t\t\t\t.find(question => question.questionId === action.questionId);\r\n\t\t\t\tif (question)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\tconst questionGroup = state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tconst questionId = questionGroup!.questions.length === 0 \r\n\t\t\t\t? 1\r\n\t\t\t\t: Math.max(...questionGroup!.questions.map(q => q.questionId)) + 1;\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\tconst questionGroup = state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tconst question = questionGroup!.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === action.questionId);\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  question: undefined,\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\t\t// Question answers\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION_ANSWER: {\r\n\t\t\t return {\r\n\t\t\t   ...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t\t{ ...q, answers: [...q.answers] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...q, answers: q.answers.filter(qa => qa.answerId !== action.answerId) }\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}   \r\n\r\n\t\tcase QuestionActionTypes.ASSIGN_QUESTION_ANSWER: {\r\n\t\t\t//const answerId = action.answerId === -1 ? state.questionGroups.lastIndexOf : action.answerId;\r\n\t\t\tconst { groupId, questionId, answerId } = action;\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== groupId\r\n\t\t\t\t\t? { ...g, questions: [...g.questions] } \r\n\t\t\t\t  \t: { ...g, questions: g.questions.map(q => q.questionId !== questionId \r\n\t\t\t\t\t\t? { ...q, answers: [...q.answers] } \r\n\t\t\t\t\t  \t: { ...q, answers: [...q.answers, { answerId, assignedBy: 1, assigned: new Date()}] }\r\n\t\t\t\t  )\r\n\t\t\t  \t})\r\n\t\t  \t}\r\n\t  \t}   \r\n\r\n\t\tcase QuestionActionTypes.SET_IS_DETAIL: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t  \t\tisDetail: action.isDetail\r\n\t\t\t}\r\n  \t\t}   \r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tlet groupId = Math.max(...state.questionGroups.map(g => g.groupId)) + 1\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId }]\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\tconst group = state.questionGroups.find(g => g.groupId === action.groupId)\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  groupIdEditing: group!.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: 0,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ? \r\n\t\t\t\t\tg \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}    \r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions]})\r\n\t\t\t\t\treturn acc\r\n\t\t\t  \t}, [])\r\n\t\t\t};\r\n\t\t}   \t\t\r\n\t\t\t \r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n\tAnswerActions,\r\n\tAnswerActionTypes,\r\n\tSUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport { IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\toptions: [],\r\n\tcreatedBy: 0,\r\n\tcreated: new Date()\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tanswer: undefined,\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\nconst aTypesToSTore = Object.keys(AnswerActionTypes).filter(a => a !== AnswerActionTypes.GET_ALL_ANSWERS);\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (state, action) => {\r\n\tconst newState = myReducer(state, action);\r\n\tif (aTypesToSTore.includes(action.type)) {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(newState.answers));\r\n\t}\r\n\treturn newState;\r\n}\r\n\r\nconst myReducer: Reducer<IAnswerState, AnswerActions> = (\r\n\tstate = initialAnswerState,\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase AnswerActionTypes.GET_ALL_ANSWERS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswers: action.answers.map(answer => { return { \r\n\t\t\t\t\t...answer,\r\n\t\t\t\t\twords: answer.text.split(' ') \r\n\t\t\t\t} }),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.GET_ANSWER: {\r\n\t\t\tconst answer = state.answers.find(a => a.answerId === action.answerId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswer\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.ADD_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tanswer: {\r\n\t\t\t\t\t...initialAnswer,\r\n\t\t\t\t\tanswerId: state.answers.length === 0 \r\n\t\t\t\t\t\t? 1\r\n\t\t\t\t\t\t: Math.max(...state.answers.map(a => a.answerId)) + 1\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.EDIT_ANSWER: {\r\n\t\t\tconst answer = state.answers.find(a => a.answerId === action.answerId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tanswer: { ...answer!, words: answer!.text.split(' ') }\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\t\tconst { answer } = action;\r\n\t\t\tlet { answerId } = answer!;\r\n\t\t\tlet answers = [];\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\tif (answerId === -1) {\r\n\t\t\t\t\tanswer.answerId = state.answers.length === 0\r\n\t\t\t\t\t\t? 1\r\n\t\t\t\t\t\t: Math.max(...state.answers.map(a => a.answerId)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\tanswers = [...state.answers, { ...answer, words: answer.text.split(' ') }]\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tanswers = state.answers.map(a => a.answerId === answerId\r\n\t\t\t\t\t? { ...answer, words: answer.text.split(' ') }\r\n\t\t\t\t\t: a)\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tanswers,\r\n\t\t\t\tanswer\r\n\t\t\t};\r\n\t\t}\t\r\n\r\n\t\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display',\r\n\t\t\t\tanswers: state.answers.filter(a => a.answerId !== action.answerId)\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// case AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\t// \tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\t// \treturn state;\r\n\t\t// }   \t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  UserActions,\r\n  UserActionTypes\r\n} from './actions';\r\n\r\nimport {IUser, IUserState } from './types'\r\n\r\nconst initialUser: IUser = {\r\n\tuserId: 0,\r\n\tname: '',\r\n\trole: 'Admin',\r\n\tdepartment: 'Development'\r\n};\r\n\r\nconst initialUserState: IUserState = {\r\n\tusers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const userReducer: Reducer<IUserState, UserActions> = (\r\n  state = initialUserState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n\r\n   case UserActionTypes.GET_ALL_USERS: {\r\n\t\treturn {\r\n        ...state,\r\n        users: action.users.map(user => ({...user}) ),\r\n      };\r\n\t} \r\n\r\n \tcase UserActionTypes.GET_USER: {\r\n      return {\r\n\t\t  ...state,\r\n        user: action.user\r\n      };\r\n\t}    \r\n\r\n\tdefault:\r\n   \t\treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { questionReducer } from '../Questions/reducer';\r\nimport { answerReducer } from '../Answers/reducer';\r\n\r\nimport { IAnswerState } from '../Answers/types';\r\nimport { IQuestionsState } from '../Questions/types';\r\nimport { IUserState } from '../user/types';\r\nimport { userReducer } from '../user/reducer';\r\n\r\nexport interface IAppState {\r\n  questionsState: IQuestionsState;\r\n  answerState: IAnswerState;\r\n  userState: IUserState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionsState: questionReducer,\r\n  answerState: answerReducer,\r\n  userState: userReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\nimport { createRef } from 'react'\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup } from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\nlet inputAutosuggest = createRef<HTMLInputElement>();\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new(): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\nexport class AutoSuggest extends React.Component<{ questionGroups: IQuestionGroup[], tekst: string, onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t//inputAutosuggest: React.RefObject<HTMLInputElement>;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvalue: props.tekst || '',\r\n\t\t\tsuggestions: this.getSuggestions(''),\r\n\t\t\thighlighted: ''\r\n\t\t};\r\n\t\t//this.inputAutosuggest = createRef<HTMLInputElement>();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tsetTimeout(() => {\r\n\t\t\t//inputAutosuggest!.current!.focus();\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\twindow.focus()\r\n\t\t\t\tinputAutosuggest!.current!.focus();\r\n\t\t\t}, 500)\r\n\r\n\t\t}, 100)\r\n\r\n\t\t// console.log('componentDidMount', document)\r\n\t\t// console.log(document?.getElementById('inputAutoSuggest'))\r\n\t\t//document?.getElementById('inputAutoSuggest')?.focus(); \r\n\t}\r\n\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\tconst { value, suggestions } = this.state;\r\n\r\n\t\treturn <QuestionAutosuggestMulti\r\n\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\tmultiSection={true}\r\n\t\t\tsuggestions={suggestions}\r\n\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\tonSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\tgetSuggestionValue={this.getSuggestionValue}\r\n\t\t\trenderSuggestion={this.renderSuggestion}\r\n\t\t\trenderSectionTitle={this.renderSectionTitle}\r\n\t\t\tgetSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t// onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\tonSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}\r\n\t\t\thighlightFirstSuggestion={true}\r\n\t\t\trenderInputComponent={this.renderInputComponent}\r\n\t\t\trenderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\tinputProps={{\r\n\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\tvalue,\r\n\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent)\r\n\t\t\t}}\r\n\r\n\t\t/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t\tsuggestions: []\r\n\t\t});\r\n\t};\r\n\r\n\r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\tconst question: IQuestion = data.suggestion;\r\n\t\t// alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\tthis.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\r\n\t\treturn (\r\n\t\t\t<span>\r\n\t\t\t\t{parts.map((part, index) => {\r\n\t\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<span className={className} key={index}>\r\n\t\t\t\t\t\t\t{part.text}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\treturn <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.RenderInputComponentProps): JSX.Element {\r\n\t\tconst { ref, ...restInputProps } = inputProps;\r\n\t\t// if (ref !== undefined)\r\n\t\t// \tthis.inputAutosuggest = ref as React.RefObject<HTMLInputElement>;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input {...restInputProps} ref={inputAutosuggest} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({ containerProps, children, query }: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<div {...containerProps}>\r\n\t\t\t\t<span>{children}</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t// endregion region Event handlers\r\n\r\n\tprotected onChange(event: /*React.ChangeEvent<HTMLInputElement>*/ React.FormEvent<any>, { newValue, method }: Autosuggest.ChangeEvent): void {\r\n\t\tthis.setState({ value: newValue });\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({ value }: any): void {\r\n\t\tthis.setState({\r\n\t\t\tsuggestions: this.getSuggestions(value)\r\n\t\t});\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]): boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i'))\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\treturn suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\treturn section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\tthis.setState({\r\n\t\t\thighlighted: params.suggestion\r\n\t\t});\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\nimport { IAnswer }  from '../Answers/types'\r\nimport './AutoSuggest.css'\r\nimport { IQuestion } from '../Questions/types';\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IAnswer> };\r\n\r\ninterface IProps {\r\n\tanswersUnassigned: IAnswer[], \r\n\tquestion: IQuestion,\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void\r\n\tsetAnswerText?: (val: string) => void\r\n}\r\n\r\nexport class AutoSuggestAnswer extends React.Component<IProps, any> {\r\n\r\n\tstate: any;\r\n\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={false}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Search answers...`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IAnswer>): void {\r\n\t\t const answer: IAnswer = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.answerId} (${question.text}).`);\r\n\t\t this.props.assignQuestionAnswer(\r\n\t\t\t this.props.question.groupId,\r\n\t\t\t this.props.question.questionId, \r\n\t\t\t answer.answerId);\r\n\t\tthis.setState({\r\n\t\t\tvalue: ''\r\n\t\t})\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IAnswer, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IAnswer>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\tif (this.props.setAnswerText) {\r\n\t\t\tthis.props.setAnswerText(newValue);\r\n\t\t}\r\n\t\tthis.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IAnswer[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\treturn this.props.answersUnassigned.filter(answer => this.anyWord(valueWordRegex, answer.words!))\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IAnswer) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion, IQuestionAnswer } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AutoSuggestAnswer } from '../../components/AutoSuggestAnswer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IQuestionAnswer[],\r\n\tanswers?: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string,\r\n\tremoveQuestionAnswer?: (groupId: number, questionId: number, answerId: number) => void,\r\n\tassignQuestionAnswer?: (groupId: number, questionId: number, answerId: number, tekst?: string) => void,\r\n\tsetAnswerText?: (val: string) => void,\r\n\tsetIsDetail: (isDetail: boolean) => void\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n\tconst { \r\n\t\tquestion, \r\n\t\tquestionAnswers, \r\n\t\tanswers, \r\n\t\tcanEdit, \r\n\t\tformMode, \r\n\t\tremoveQuestionAnswer, assignQuestionAnswer, setIsDetail \r\n\t} = props; \r\n\tconst answersUnassigned = answers?.filter(a => !question.answers.map(a=>a.answerId).includes(a.answerId))\r\n\r\n\tconst [tekst, setTekst] = React.useState('');\r\n\tconst setAnswerText = (val: string) => {\r\n\t\tsetTekst(val);\r\n\t}\r\n\r\n\tconst assignQuestionAnswerTekst = () => {\r\n\t\tif (assignQuestionAnswer) {\r\n\t\t\t//storeAnswer({ answerId: -1, text: tekst }, 'add')\r\n\t\t\tassignQuestionAnswer(\r\n\t\t\t\tquestion.groupId,\r\n\t\t\t\tquestion.questionId, \r\n\t\t\t\t-1,\r\n\t\t\t\ttekst\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tconst goDetail = (isDetail: boolean) => {\r\n\t\tsetIsDetail(isDetail);\r\n\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.add('detail-view-open');\r\n\t\tdivDetailView!.style.zIndex = '3';\r\n\t\t//document.body.classList.add('hide-scroll-bar');\r\n  \t}\t\r\n\r\n\r\n    return (\r\n      <div className=\"name-container question-answers\">\r\n\t\t\t{/* { questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t} */}\r\n\t\t\t{ questionAnswers.length > -1 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table width=\"100%\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>{ questionAnswers.length === 0 ? 'No resolutions yet' : 'Resolutions'}</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(qa => \r\n\t\t\t\t\t\t\t<tr key={qa.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\" title={`Assigned: ${qa.assigned.toLocaleDateString()} ${qa.assigned.toLocaleTimeString()}`}>\r\n\t\t\t\t\t\t\t\t\t{qa.answerId} {qa.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => { \r\n\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer!(question.groupId, question.questionId, qa.answerId)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{canEdit && formMode !== 'display' && <tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<AutoSuggestAnswer\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tanswersUnassigned={answersUnassigned!}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer!}\r\n\t\t\t\t\t\t\t\t\tsetAnswerText={setAnswerText}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td width=\"35px\">\r\n\t\t\t\t\t\t\t\t<button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => goDetail(true)}>\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPlus} color='lightblue' />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from \"react\";\r\n\r\ntype OptionValue = string | number;\r\n\r\nexport type Option<T extends OptionValue> = {\r\n    value: T;\r\n    label: string;\r\n};\r\n\r\ntype Props<T extends OptionValue> = {\r\n    options: Option<T>[];\r\n    value: T;\r\n    onChange: (e: React.FormEvent<HTMLSelectElement>, value: T) => void;\r\n    id: string,\r\n    name: string,\r\n    disabled?: boolean\r\n};\r\n\r\nexport function Select<T extends OptionValue>(props: Props<T>) {\r\n    const disabled = props.disabled ? true : false;\r\n    function handleOnChange(e: React.FormEvent<HTMLSelectElement>) {\r\n        const { selectedIndex } = e.currentTarget;\r\n        const selectedOption = props.options[selectedIndex];\r\n        props.onChange(e, selectedOption.value);\r\n    }\r\n\r\n    return (\r\n        <select id={props.id} value={props.value} onChange={handleOnChange} disabled={disabled}>\r\n            {props.options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                    {option.label}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    );\r\n}","const palx = require('palx');\r\nexport const BASE_COLOR = '#666ee8';\r\nexport const COLORS = palx(BASE_COLOR);","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion, IQuestionAnswer } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\nimport { Select } from '../../common/Select';\r\nimport { Option } from '../../common/Select'\r\nimport { COLORS } from '../../formik/theme';\r\n\r\ninterface IProps {\r\n  question: IQuestion;\r\n  questionAnswers: IQuestionAnswer[];\r\n  answers: IAnswer[];\r\n  formMode: string;\r\n  canEdit: boolean,\r\n  cancel: () => void;\r\n  saveForm: (question: IQuestion, formMode: string) => void;\r\n  removeQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  assignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  setIsDetail: (isDetail: boolean) => void;\r\n  userOptions: Option<number>[];\r\n  sourceOptions: Option<number>[];\r\n  statusOptions: Option<number>[];\r\n}\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      groupId: props.question.groupId,\r\n      questionId: props.question.questionId,\r\n      text: props.question.text,\r\n      source: props.question.source,\r\n      status: props.question.status,\r\n      answers: props.question.answers,\r\n      createdBy: props.question.createdBy,\r\n      created: props.question.created\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      props.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n\r\n        <label className=\"id\" htmlFor=\"questionId\">QuestionId:</label>\r\n        {/* <input\r\n          id=\"questionId\"\r\n          name=\"questionId\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.questionId}\r\n          disabled\r\n          style={{ width: '50px' }}\r\n        />\r\n        {formik.touched.questionId && formik.errors.questionId ? (\r\n          <div>{formik.errors.questionId}</div>\r\n        ) : null} */}\r\n        <span id=\"questionId\">{formik.values.questionId}</span>\r\n\r\n        <label htmlFor=\"text\">Name</label>\r\n        <textarea\r\n          id=\"text\"\r\n          name=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.text}\r\n          style={{ width: '100%' }}\r\n          rows={2}\r\n        />\r\n        {formik.touched.text && formik.errors.text ? (\r\n          <div>{formik.errors.text}</div>\r\n        ) : null}\r\n\r\n        <label htmlFor=\"createdBy\">Source</label>\r\n        <Select\r\n          id=\"source\"\r\n          name=\"source\"\r\n          options={props.sourceOptions}\r\n          onChange={formik.handleChange}\r\n          value={formik.values.source}\r\n        />\r\n\r\n        <br />\r\n        <QuestionAnswers\r\n          question={props.question}\r\n          questionAnswers={props.questionAnswers}\r\n          answers={props.answers}\r\n          canEdit={props.canEdit}\r\n          formMode={props.formMode}\r\n          removeQuestionAnswer={props.removeQuestionAnswer}\r\n          assignQuestionAnswer={props.assignQuestionAnswer}\r\n          setIsDetail={props.setIsDetail}\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"status\">Status</label>\r\n        <Select\r\n          id=\"status\"\r\n          name=\"status\"\r\n          options={props.statusOptions}\r\n          onChange={formik.handleChange}\r\n          value={formik.values.status}\r\n        />\r\n\r\n        <label htmlFor=\"createdBy\">Created by</label>\r\n        <Select\r\n          id=\"createdBy\"\r\n          name=\"createdBy\"\r\n          options={props.userOptions}\r\n          onChange={formik.handleChange}\r\n          value={formik.values.createdBy}\r\n        // onChange={(gradeId: number) =>\r\n        // \tdispatch({\r\n        // \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n        // \t\tstudentGradeIds: {\r\n        // \t\t\tstudentId: student!.id,\r\n        // \t\t\tgradeId: gradeId,\r\n        // \t\t\tgradeName: gradesAll[gradeId].name\r\n        // \t\t}\r\n        // \t})\r\n        // }\r\n        />\r\n\r\n        {/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n        {/* <button type=\"submit\">Submit</button> */}\r\n\r\n        <div className=\"buttons\">\r\n          {props.canEdit &&\r\n            <button onClick={() => props.cancel()}>Cancel</button>}\r\n          {props.canEdit &&\r\n            <button type=\"submit\">Save</button>}\r\n        </div>\r\n      </form>\r\n\r\n\r\n\r\n      <label className=\"id\" htmlFor=\"created\">Created:</label>\r\n      {/* <input\r\n        id=\"created\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.created.toLocaleDateString()}\r\n        disabled={true}\r\n      />\r\n      {formik.touched.created && formik.errors.created ? (\r\n        <div>{formik.errors.created}</div>\r\n      ) : null} */}\r\n \t\t\t<span>{formik.values.created.toLocaleDateString()}</span>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nconst color = 'blue';\r\n\r\nexport const QuestionForm: React.FC<IProps> = (props: IProps) => {\r\n  return (\r\n    <div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n      <div\r\n        style={{\r\n          height: '100%',\r\n          background: COLORS[color][5],\r\n          padding: '1rem 1rem',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            borderRadius: '4px',\r\n            boxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n            background: '#fff',\r\n            maxWidth: '90%',\r\n            margin: '0 auto',\r\n            padding: '1rem',\r\n          }}\r\n        >\r\n          <div className=\"formik-example formik-example--blue\">\r\n            <Form {...props} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { COLORS } from '../../formik/theme';\r\nimport { Option, Select } from '../../common/Select'\r\nimport { IQuestion, IQuestionAnswer } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n  question: IQuestion;\r\n  questionAnswers: IQuestionAnswer[];\r\n  answers: IAnswer[];\r\n  formMode: string;\r\n  canEdit: boolean,\r\n  edit: () => void;\r\n  remove: () => void;\r\n  removeQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  assignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  setIsDetail: (isDetail: boolean) => void;\r\n  userOptions: Option<number>[];\r\n  sourceOptions: Option<number>[];\r\n  statusOptions: Option<number>[];\r\n}\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      groupId: props.question.groupId,\r\n      questionId: props.question.questionId,\r\n      text: props.question.text,\r\n      source: props.question.source,\r\n      status: props.question.status,\r\n      answers: props.question.answers,\r\n      createdBy: props.question.createdBy,\r\n      created: props.question.created,\r\n      userOptions: props.userOptions,\r\n      sourceOptions: props.sourceOptions,\r\n      statusOptions: props.statusOptions\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n      <label className=\"id\" htmlFor=\"questionId\">QuestionId:</label>\r\n      {/* <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.questionId}\r\n        disabled\r\n        style={{ width: '50px' }}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null} */}\r\n      <span id=\"questionId\">{formik.values.questionId}</span>\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <textarea\r\n        id=\"text\"\r\n        name=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n        disabled\r\n        style={{ width: '100%' }}\r\n        rows={2}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"createdBy\">Source</label>\r\n      <Select\r\n        id=\"source\"\r\n        name=\"source\"\r\n        options={formik.values.sourceOptions}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.source}\r\n        disabled={true}\r\n      />\r\n\r\n      <br />\r\n      <QuestionAnswers\r\n        question={props.question}\r\n        questionAnswers={props.questionAnswers}\r\n        canEdit={props.canEdit}\r\n        formMode={props.formMode}\r\n        setIsDetail={props.setIsDetail}\r\n      />\r\n      <br />\r\n\r\n      <label htmlFor=\"status\">Status</label>\r\n      <Select\r\n        id=\"status\"\r\n        name=\"status\"\r\n        options={formik.values.statusOptions}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.status}\r\n        disabled={true}\r\n      />\r\n\r\n      <label htmlFor=\"createdBy\">Created by</label>\r\n      <Select\r\n        id=\"createdBy\"\r\n        name=\"createdBy\"\r\n        options={formik.values.userOptions}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.createdBy}\r\n        disabled={true}\r\n      // onChange={(gradeId: number) =>\r\n      // \tdispatch({\r\n      // \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n      // \t\tstudentGradeIds: {\r\n      // \t\t\tstudentId: student!.id,\r\n      // \t\t\tgradeId: gradeId,\r\n      // \t\t\tgradeName: gradesAll[gradeId].name\r\n      // \t\t}\r\n      // \t})\r\n      // }\r\n      />\r\n\r\n\r\n      <label className=\"id\" htmlFor=\"created\">Created:</label>\r\n      {/* <input\r\n        id=\"created\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.created.toLocaleDateString()}\r\n      />\r\n      {formik.touched.created && formik.errors.created ? (\r\n        <div>{formik.errors.created}</div>\r\n      ) : null} */}\r\n\t\t\t<span>{formik.values.created.toLocaleDateString()}</span>\r\n\r\n      {/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n      {props.canEdit &&\r\n        <div className=\"buttons\">\r\n          <button onClick={() => props.edit()}>Edit</button>\r\n          <button onClick={() => props.remove()}>Remove</button>\r\n        </div>\r\n      }\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nconst color = 'blue';\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  return (\r\n    <div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n      <div\r\n        style={{\r\n          height: '100%',\r\n          background: COLORS[color][5],\r\n          padding: '1rem 1rem',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            borderRadius: '4px',\r\n            boxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n            background: '#fff',\r\n            maxWidth: '90%',\r\n            margin: '0 auto',\r\n            padding: '1rem',\r\n          }}\r\n        >\r\n          <div className=\"formik-example formik-example--blue\">\r\n            <Form {...props} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n \r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\tconst { groupId, questionId } = question;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && \r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit\" onClick={() => edit(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove\" onClick={() => remove(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, editGroup, removeGroup } = props;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} key={questionGroup.groupId} className=\"name\" >\r\n\t\t\t<span className='question-group-title'>{questionGroup.title}</span>\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\t\t\t\r\n\t\t\t{hoverProps.isHovered && questionGroup.questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\nimport { COLORS } from '../../formik/theme';\r\nimport { Select } from '../../common/Select';\r\nimport { Option } from '../../common/Select'\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n\tuserOptions: Option<number>[];\r\n}\r\n\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n\tconst formik = useFormik({\r\n\t\tenableReinitialize: true,\r\n\t\tinitialValues: {\r\n\t\t\tanswerId: props.answer.answerId,\r\n\t\t\ttext: props.answer.text,\r\n\t\t\tcreatedBy: props.answer.createdBy,\r\n\t\t\tcreated: props.answer.created,\r\n\t\t},\r\n\t\tvalidationSchema: Yup.object({\r\n\t\t\ttext: Yup.string()\r\n\t\t\t\t.max(150, 'Must be 150 characters or less')\r\n\t\t\t\t.required('Required'),\r\n\t\t}),\r\n\t\tonSubmit: (values) => {\r\n\t\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\t\tprops.saveForm(values, props.formMode)\r\n\t\t},\r\n\t});\r\n\r\n\r\n\treturn (\r\n\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t{props.formMode !== 'add' &&\r\n\t\t\t\t<>\r\n\t\t\t\t\t<label className=\"id\" htmlFor=\"answerId\">Answer Id: </label>\r\n\t\t\t\t\t{/* <input\r\n\t\t\t\t\t\tid=\"answerId\"\r\n\t\t\t\t\t\tname=\"answerId\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\t\t\tvalue={formik.values.answerId}\r\n\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t\tstyle={{ width: '50px' }}\r\n\t\t\t\t\t/> */}\r\n\t\t\t\t\t<span id=\"answerId\">{formik.values.answerId}</span>\r\n\t\t\t\t\t{/* {formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t\t\t) : null} */}\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\r\n\t\t\t<label htmlFor=\"text\">Resolution</label>\r\n\t\t\t<textarea\r\n\t\t\t\tid=\"text\"\r\n\t\t\t\tname=\"text\"\r\n\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\tvalue={formik.values.text}\r\n\t\t\t\trows={2}\r\n\t\t\t\tstyle={{width: '100%'}}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.text && formik.errors.text ? (\r\n\t\t\t\t<div>{formik.errors.text}</div>\r\n\t\t\t) : null}\r\n\r\n\t\t\t<label htmlFor=\"createdBy\">Created by</label>\r\n\t\t\t<Select\r\n\t\t\t\tid=\"createdBy\"\r\n\t\t\t\tname=\"createdBy\"\r\n\t\t\t\toptions={props.userOptions}\r\n\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\tvalue={formik.values.createdBy}\r\n\t\t\t// onChange={(gradeId: number) =>\r\n\t\t\t// \tdispatch({\r\n\t\t\t// \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n\t\t\t// \t\tstudentGradeIds: {\r\n\t\t\t// \t\t\tstudentId: student!.id,\r\n\t\t\t// \t\t\tgradeId: gradeId,\r\n\t\t\t// \t\t\tgradeName: gradesAll[gradeId].name\r\n\t\t\t// \t\t}\r\n\t\t\t// \t})\r\n\t\t\t// }\r\n\t\t\t/>\r\n\r\n\t\t\t<label className=\"id\" htmlFor=\"created\">Created:</label>\r\n\t\t\t{/* <input\r\n\t\t\t\tid=\"created\"\r\n\t\t\t\tname=\"text\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\tvalue={formik.values.created.toLocaleDateString()}\r\n\t\t\t\tdisabled={true}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.created && formik.errors.created ? (\r\n\t\t\t\t<div>{formik.errors.created}</div>\r\n\t\t\t) : null} */}\r\n\t\t\t<span>{formik.values.created.toLocaleDateString()}</span>\r\n\r\n\t\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t\t<div className=\"buttons\">\r\n\t\t\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n\t\t\t\t<button type=\"submit\">Save</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nconst color = 'blue';\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n\treturn (\r\n\t\t<div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: '100%',\r\n\t\t\t\t\tbackground: COLORS[color][5],\r\n\t\t\t\t\tpadding: '0.1rem 0.1rem',\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tborderRadius: '4px',\r\n\t\t\t\t\t\tboxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n\t\t\t\t\t\tbackground: '#fff',\r\n\t\t\t\t\t\tmaxWidth: '90%',\r\n\t\t\t\t\t\tmargin: '0 auto',\r\n\t\t\t\t\t\tpadding: '0.5rem',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className=\"formik-example formik-example--blue\">\r\n\t\t\t\t\t\t<Form {...props} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useState, useEffect } from 'react'\r\n\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AnswerForm } from '../../Answers/components/Form'\r\nimport { Option } from '../../common/Select'\r\nimport { assignQuestionAnswer } from '../actions';\r\nimport { COLORS } from '../../formik/theme';\r\nconst color = 'blue';\r\n\r\ninterface IProps {\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\taddAndAssignNewAnswer: (groupId: number, questionId: number, answer: IAnswer, formMode: string) => void,\r\n  \tuserOptions: Option<number>[];\r\n\tlastAnswer?: IAnswer\r\n}\r\n\r\n//export default function DetailView() {\r\nexport const DetailView: React.FC<IProps> = (props: IProps) => {\r\n\r\n\t// const complete = ({name}) => dispatch({ type: 'TOGGLE', name: 'new Todo' })\r\n\tconst { groupId, questionId, lastAnswer, addAndAssignNewAnswer } = props;\r\n\tuseEffect(()=> {\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.addEventListener('animationend', () => {\r\n\t\t\tif (divDetailView!.classList.contains('detail-view-close')) {\r\n\t\t\t\tdivDetailView!.style.zIndex = '0';\r\n\t\t\t\tdivDetailView!.style.left = '100%';\r\n\t\t\t\tdivDetailView!.classList.remove('detail-view-close');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdivDetailView!.style.left = '60%';\r\n\t\t\t}\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst close = () => {\r\n\t\t// dispatch({ type: 'GO_BACK', page: \"LIST_PAGE\" })\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.remove('detail-view-open');\r\n\t\tdivDetailView!.classList.add('detail-view-close');\r\n\r\n\t\t//document.body.classList.remove('hide-scroll-bar');\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div id=\"divDetailView\" className=\"detail-view\">\r\n\t\t\t{/* <div onClick={complete}>{todo.name}</div> */}\r\n\t\t\t<button style={{position: 'absolute', right:'10px'}} onClick={close}>X</button>\r\n\t\t\t{/* <div style={{width: '100%', border: '1px solid silver', borderRadius: '5px', padding: '0px'}}> */}\r\n\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Add and Assign new Answer</h4>\r\n\t\t\t\t<AnswerForm\r\n\t\t\t\t\tanswer={{\r\n\t\t\t\t\t\tanswerId: -1, \r\n\t\t\t\t\t\ttext: 'argh',\r\n\t\t\t\t\t\tcreatedBy: 0,\r\n\t\t\t\t\t\tcreated: new Date()\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tformMode='add'\r\n\t\t\t\t\tcancel={()  => {}}\r\n\t\t\t\t\tsaveForm={(answer: IAnswer) => { \r\n\t\t\t\t\t\taddAndAssignNewAnswer(groupId, questionId, answer, 'add');\r\n\t\t\t\t\t\tclose();\r\n\t\t\t\t\t}} \r\n\t\t\t\t\tuserOptions={props.userOptions}\r\n\t\t\t\t/>\r\n\t\t\t</div>\t\t\t\t\r\n\t\t</div>\r\n\t)\r\n}","export const sourceOptions = [\r\n    { label: \"Unknown\", value: 0 },\r\n    { label: \"Gmail\", value: 1 },\r\n    { label: \"Outlook\", value: 2 },\r\n    { label: \"Phone\", value: 3 },\r\n    { label: \"Chat\", value: 4 },\r\n    { label: \"Slack\", value: 5 }\r\n]","export const statusOptions = [\r\n    { label: \"Unknown\", value: 0 },\r\n    { label: \"In progress\", value: 1 },\r\n    { label: \"Can't reproduce\", value: 2 },\r\n    { label: \"Blocked\", value: 3 },\r\n    { label: \"Complete\", value: 4 }\r\n]","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { QuestionForm } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\nimport { DetailView } from './DetailView';\r\n\r\nimport { sourceOptions } from './../../issueSource/sourceOptions'\r\nimport { statusOptions } from './../../issueStatus/statusOptions'\r\nimport { COLORS } from '../../formik/theme';\r\nconst color = 'blue';\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, \r\n\t\t\tformMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\taddGroup, editGroup, removeGroup, storeGroup,\r\n\t\t\tremoveQuestionAnswer, assignQuestionAnswer,\r\n\t\t\tsetIsDetail, isDetail, addAndAssignNewAnswer,\r\n\t\t\tuserOptions } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t {\r\n\t\t\tinputEl.current!.select();\r\n\t\t\tinputEl.current!.focus()\r\n\t\t}\r\n\t}, 100)\r\n\r\n\treturn (\r\n\t   <>\r\n\t\t\t<div className=\"name-container\">\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<AutoSuggest \r\n\t\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<hr />\r\n\r\n\t\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing === questionGroup.groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={questionGroup.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== questionGroup.groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '10px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={question.questionId}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\t\tAdd a new Section\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Question</h4>\r\n\t\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t\tsourceOptions={sourceOptions}\r\n\t\t\t\t\t\t\t\t\t\tstatusOptions={statusOptions}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<QuestionForm \r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t\tsourceOptions={sourceOptions}\r\n\t\t\t\t\t\t\t\t\t\tstatusOptions={statusOptions}\t\t\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<DetailView \r\n\t\t\t\tgroupId={question ? question!.groupId : 0}\r\n\t\t\t\tquestionId= {question ? question!.questionId : 0}\r\n\t\t\t\taddAndAssignNewAnswer={addAndAssignNewAnswer}\r\n\t\t\t\tuserOptions={userOptions}\r\n\t\t\t/>\t{/* visible={isDetail} */}\r\n\t  </>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IQuestion, IComponentProps } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { QuestionForm } from './Form'\r\n\r\nimport { sourceOptions } from '../../issueSource/sourceOptions'\r\nimport { statusOptions } from '../../issueStatus/statusOptions'\r\nimport { COLORS } from '../../formik/theme';\r\nconst color = 'blue';\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n  \r\nconst SupportPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, onSelectQuestion, cancel, saveForm, canEdit,\r\n\t\tremoveQuestionAnswer, assignQuestionAnswer, setIsDetail, \r\n\t\tuserOptions } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t{/* Support Page tekst: {tekst} */}\r\n\t\t\t\t\t<AutoSuggest\r\n\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\tonSelectQuestion={onSelectQuestion} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Question</h4>\r\n\t\t\t\t\t\t\t<QuestionForm \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\tsourceOptions={sourceOptions}\r\n\t\t\t\t\t\t\t\tstatusOptions={statusOptions}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default SupportPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionAnswer, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup,\r\n\tremoveQuestionAnswer,\r\n\tassignQuestionAnswer,\r\n\tsetIsDetail,\r\n\taddAndAssignNewAnswer\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport SupportPage from '../components/SuportPage'\r\n\r\n\r\nconst joinQuestionAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IQuestionAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst questionAnswers = question.answers.map(qa => ({...qa, text: answers.find(a => a.answerId === qa.answerId)!.text}));\r\n\treturn questionAnswers.sort((a,b) => a.assigned < b.assigned ? 1 : -1);\r\n\t//return answers.filter(answer => questionAnswers.map(a=>a.answerId).includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionsState.questionGroups,\r\n\t\tquestion: store.questionsState.question!,\r\n\t\tquestionAnswers: joinQuestionAnswers(store.questionsState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionsState.formMode,\r\n\t\tgroupIdEditing: store.questionsState.groupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t\tisDetail: store.questionsState.isDetail,\r\n\t\tuserOptions: store.userState.users.map(user => ({ label: user.name, value: user.userId }))\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group)),\r\n\r\n\t\t// question answers\r\n\t\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(removeQuestionAnswer(groupId, questionId, answerId)),\r\n\r\n\t\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId)),\r\n\t\t\r\n\t\tsetIsDetail: (isDetail: boolean) => {\r\n\t\t\tdispatch<any>(setIsDetail(isDetail))\r\n\t\t},\r\n\r\n\t\taddAndAssignNewAnswer: (groupId: number, questionId: number, answer: IAnswer, formMode: string) => {\r\n\t\t\tdispatch<any>(addAndAssignNewAnswer(groupId, questionId, answer, formMode))\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(SupportPage)\r\n};","import * as React from 'react';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center', marginBlockStart: '0.66rem', marginBlockEnd: '0.1rem' }}>Questions &amp; Answers</h2>\n      <h5 style={{textAlign: 'center'}}>A knowledge base is a great tool for sharing information. \n        <br/> When you record your experiences and insights regularly, other members of your team reap the rewards.\n      </h5>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\nimport { IQuestionAnswer } from '../../Questions/types';\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer,\r\n\tusedAnswers: IQuestionAnswer[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nexport const ListRow: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answer, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<tr key={answer.answerId} >\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.answerId}\r\n\t\t\t</td>\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.text}\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\ttitle=\"Add a new Answer\"\r\n\t\t\t\t\tonClick={() => edit(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button \r\n\t\t\t\t\tdisabled={usedAnswers.map(a=>a.answerId).includes(answer.answerId)}\r\n\t\t\t\t\tclassName=\"button-remove\"\r\n\t\t\t\t\ttitle=\"Remove Answer\"\r\n\t\t\t\t\tonClick={() => remove(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t);\r\n  }\r\n\r\n","import * as React from 'react';\r\nimport { IQuestionAnswer } from '../../Questions/types';\r\n\r\nimport { IAnswer } from '../types';\r\nimport { ListRow } from './ListRow';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tusedAnswers: IQuestionAnswer[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nconst List: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answers, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<table width=\"100%\">\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t<ListRow\r\n\t\t\t\t\t\tkey={answer.answerId}\r\n\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\tusedAnswers={usedAnswers}\r\n\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t);\r\n  }\r\n\r\nexport default List\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\nimport { ListRow } from './ListRow';\r\nimport List from './List';\r\nimport { Option } from '../../common/Select'\r\nimport { COLORS } from '../../formik/theme';\r\nimport { IQuestionAnswer } from '../../Questions/types';\r\nconst color = 'blue';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer,\r\n\tusedAnswers: IQuestionAnswer[],\r\n\tuserOptions: Option<number>[];\r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\ntype MyParams = {\r\n\tslug: string;\r\n  };\r\n\r\nconst Page: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams<MyParams>();\r\n\t// slug = ''\r\n\tconst { answers, answer, usedAnswers, formMode, add, edit, remove, cancel, saveForm, userOptions } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<List answers={answers} usedAnswers={usedAnswers} edit={edit} remove={remove} />\r\n\t\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>New Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm \r\n\t\t\t\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(answer: IAnswer) => saveForm(answer, formMode)} \r\n\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm\r\n\t\t\t\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(answer: IAnswer) => saveForm(answer, formMode)}\r\n\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Page\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Page from '../components/Page'\r\nimport { IQuestionAnswer, IQuestionGroup } from '../../Questions/types';\r\n\r\nconst getUsedAnswers = (questionGroups: IQuestionGroup[]) : IQuestionAnswer[]=> {\r\n\tlet questionAnswers: IQuestionAnswer[] = [];\r\n\tfor (let group of questionGroups)\r\n\t\tfor (let question of group.questions)\r\n\t\tquestionAnswers = questionAnswers.concat(question.answers)\r\n\treturn questionAnswers;\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\tanswers: store.answerState.answers,\r\n\tanswer: store.answerState.answer!,\r\n\tformMode: store.answerState.formMode,\r\n\tusedAnswers: getUsedAnswers(store.questionsState.questionGroups),\r\n\tuserOptions: store.userState.users.map(user => ({ label: user.name, value: user.userId }))\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","import React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { Store } from 'redux';\r\n\r\nimport configureStore, { IAppState } from './store/Store';\r\nimport { getAllQuestions } from './Questions/actions';\r\nimport { getAllAnswers } from './Answers/actions';\r\n\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nimport App from './components/App';\r\nimport AnswersPage from './Answers/containers/Page'\r\nimport containers from './Questions/containers/Pages'\r\n\r\nimport './formik/formikStyles.css';\r\nimport { css } from 'glamor';\r\nimport { COLORS } from './formik/theme';\r\nimport { getAllUsers } from './user/actions';\r\nconst { base, black, ...cols } = COLORS;\r\n\r\n// function getQueryStringParams(paramName: string) : string {\r\n// \tlet searchParams = new URLSearchParams(window.location.search.substring(1));\r\n// \tsearchParams.forEach(p => console.log(p))\r\n// \tconst s =  searchParams.get(paramName) || '';\r\n// \treturn s;\r\n// }\r\n\r\n//const tekst = getQueryStringParams('tekst');\r\n\r\n// Cool example colors.\r\nObject.keys(cols).forEach(color => {\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit'],\r\n\t.formik-example.formik-example--${color} button.primary`,\r\n\t  {\r\n\t\t background: COLORS[color][5],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:focus,\r\n\t  .formik-example.formik-example--${color} button.primary:focus`,\r\n\t  {\r\n\t\t background: COLORS[color][6],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:active,\r\n\t  .formik-example.formik-example--${color} button.primary:active`,\r\n\t  {\r\n\t\t background: COLORS[color][7],\r\n\t  }\r\n\t);\r\n \r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} input:focus, .formik-example.formik-example--${color} select:focus`,\r\n\t  {\r\n\t\t borderColor: COLORS[color][4],\r\n\t\t boxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 0 3px ${COLORS[color][1]}`,\r\n\t\t outline: 'none',\r\n\t  }\r\n\t);\r\n });\r\n\r\n\r\ninterface IProps {\r\n\tstore: Store<IAppState>;\r\n}\r\n\r\n// <Router basename={'/'}>\r\nconst Root: React.SFC<IProps> = props => {\r\n\treturn (\r\n\t\t<Provider store={props.store} >\r\n\t\t\t<Router basename={'/'}>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/supporter/promo\">Supporter</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li  className=\"push-right\">\r\n\t\t\t\t\t\t\t<Link to=\"/answers/sima\">Sign In</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\t\t\t\t\t\r\n\t\t\t\t</nav>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t{/* exact */}\r\n\t\t\t\t\t\t<Route exact path=\"/supporter/:tekst?\">\r\n\t\t\t\t\t\t\t{<App />}\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/questions\">\r\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\r\n\t\t\t\t\t\t\t<AnswersPage />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{/* <Route\r\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\r\n\t\t\t\t\t\t\trender={({ match }) => {\r\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\r\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\t\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\n\r\n// Generate the store\r\nlocalStorage.clear(); // !!!!!!!!!!!!\r\n\r\nconst store = configureStore();\r\nstore.dispatch(getAllQuestions());\r\nstore.dispatch(getAllAnswers());\r\nstore.dispatch(getAllUsers())\r\n\r\n// Render the App\r\n// ReactDOM.render(<Root store={store} />, document.getElementById(\r\n//   'root'\r\n// ) as HTMLElement);\r\n\r\n// React.StrictMode\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t  <Root store={store} />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root') \r\n  );"],"sourceRoot":""}