{"version":3,"sources":["Answers/actions.ts","Questions/actions.ts","user/actions.ts","Questions/reducer.ts","Answers/reducer.ts","user/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/AutoSuggestAnswer.tsx","common/useHover.tsx","Questions/components/QuestionAnswerRow.tsx","Questions/components/QuestionAnswers.tsx","common/Select.tsx","formik/theme.js","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","Questions/components/QuestionRow.tsx","Questions/components/GroupRow.tsx","Answers/components/Form.tsx","Questions/components/DetailView.tsx","issueSource/sourceOptions.ts","issueStatus/statusOptions.ts","Questions/components/QuestionsPage.tsx","Questions/components/SuportPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","Answers/components/ListRow.tsx","Answers/components/List.tsx","Answers/components/Page.tsx","Answers/containers/Page.tsx","cool-colors.tsx","index.tsx"],"names":["AnswerActionTypes","parseFromJson","data","map","a","parseDates","created","Date","SUPPORT_ANSWERS","QuestionActionTypes","addAnswer","dispatch","type","ADD_ANSWER","err","console","error","storeAnswer","answer","formMode","getState","STORE_ANSWER","Promise","resolve","answerState","answerId","g","questions","q","answers","assigned","UserActionTypes","getQuestion","questionId","GET_QUESTION","selectQuestionAnswer","groupId","delay","REMOVE_QUESTION_ANSWER","copyQuestionAnswer","assignQuestionAnswer","tekst","ASSIGN_QUESTION_ANSWER","reject","setTimeout","SUPPORT_QUESTIONS","initialQuestion","text","words","source","status","createdBy","initialQuestionGroup","title","isExpanded","initialQuestionsState","questionGroups","question","undefined","groupOptions","loading","groupIdEditing","isDetail","aTypesToSTore","Object","keys","filter","GET_ALL_QUESTIONS","myReducer","state","action","section","split","f","value","label","unshift","log","find","ADD_QUESTION","questionIdMax","EDIT_QUESTION","questionGroup","STORE_QUESTION","includes","CANCEL_QUESTION","REMOVE_QUESTION","qa","assignedBy","SET_IS_DETAIL","ADD_GROUP","Math","max","TOGGLE_GROUP","EDIT_GROUP","group","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","initialAnswer","options","initialAnswerState","GET_ALL_ANSWERS","GET_ANSWER","length","EDIT_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","storageUsersDemo","storageUsers","initialUserState","users","rootReducer","combineReducers","questionsState","newState","localStorage","setItem","JSON","stringify","userState","GET_ALL_USERS","user","GET_USER","inputAutosuggest","createRef","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","getSuggestions","highlighted","window","focus","current","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderInputComponent","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","ref","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","AutoSuggestAnswer","setAnswerText","answersUnassigned","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","addEventListener","removeEventListener","QuestionAnswerRow","hoverRef","questionAnswer","removeQuestionAnswer","onClick","alert","navigator","clipboard","writeText","then","stopPropagation","icon","faCopy","color","faWindowClose","QuestionAnswers","questionAnswers","canEdit","setIsDetail","setTekst","width","toLocaleDateString","toLocaleTimeString","val","divDetailView","document","getElementById","classList","add","style","zIndex","goDetail","faPlus","Select","disabled","id","selectedIndex","currentTarget","selectedOption","option","COLORS","require","palx","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","isEdit","handleSubmit","htmlFor","name","setFieldValue","submitForm","handleChange","onBlur","rows","touched","errors","sourceOptions","statusOptions","userOptions","cancel","QuestionForm","height","background","padding","borderRadius","boxShadow","maxWidth","margin","handleBlur","edit","remove","DisplayForm","QuestionRow","faEdit","GroupRow","toggleGroup","editGroup","removeGroup","marginLeft","faCaretDown","faCaretRight","size","AnswerForm","DetailView","addAndAssignNewAnswer","lastAnswer","contains","left","close","position","right","border","marginTop","QuestionsPage","useParams","addGroup","storeGroup","inputEl","select","textAlign","paddingBottom","target","defaultValue","SupportPage","display","joinQuestionAnswers","sort","b","mapStateToProps","store","ownProps","userId","mapDispatchToProps","questionGroupId","addQuestion","editQuestion","removeQuestion","storeQuestion","connect","promoter","div","querySelector","setAttribute","App","marginBlockStart","marginBlockEnd","ListRow","usedAnswers","List","Page","slug","getUsedAnswers","concat","editAnswer","removeAnswer","cols","base","black","Root","basename","to","exact","path","forEach","css","global","borderColor","outline","createStore","applyMiddleware","thunk","sQuestions","getItem","groups","parse","sAnswers","parsed","sUsers","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.a16cf37c.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState, IAnswerJson } from './types';\r\n\r\nimport { QuestionActionTypes } from '../Questions/actions';\r\nimport { getJSDocTemplateTag } from 'typescript';\r\nimport { IAppState } from '../store/Store';\r\n\r\nimport data from \"./data.json\"\r\nconst parseFromJson = (): IAnswer[] => {\r\n\treturn data.map(a => parseDates(a))\r\n}\r\n\r\nconst parseFromLocalStorage = (arr: IAnswerJson[]) : IAnswer[] =>  {\r\n\treturn arr.map(a => parseDates(a));\r\n}\r\n\r\nconst parseDates = (a: IAnswerJson): IAnswer => ({\r\n\t...a, \r\n\tcreated: new Date(a.created)\r\n})\r\n\r\n// localStorage\r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS';\r\n \r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n\tassignToQuestion?: boolean\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tlet answers: IAnswer[] = [];\r\n\t\t\tif (isWebStorageSupported()) {\r\n\t\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\t\tconsole.log('SAnswers',  sAnswers)\r\n\t\t\t\tif (sAnswers !== null) {\r\n\t\t\t\t\tconst parsed = JSON.parse(sAnswers);\r\n\t\t\t\t\tanswers = parseFromLocalStorage(parsed);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tanswers = parseFromJson();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tanswers = parseFromJson();\r\n\t\t\t}\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.GET_ALL_ANSWERS,\r\n\t\t\t\tanswers\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.GET_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.EDIT_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.REMOVE_ANSWER,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAppState, null, IStore>\r\n> = (answer: IAnswer, formMode: string) => {\r\n\treturn async (dispatch: Dispatch, getState: () => IAppState ): Promise<any> => {\r\n\t\ttry {\r\n\t\t\tif (formMode === 'add') {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\t\tanswer\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.resolve(getState().answerState.answer!.answerId)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\t\tanswer\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\n// const addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n// \treturn new Promise((resolve, reject) => {\r\n// \t\tsetTimeout(() => {\r\n// \t\t\tresolve({\r\n// \t\t\t\t'status': 200,\r\n// \t\t\t\t'content-type': 'application/json',\r\n// \t\t\t\t'data' : {\r\n// \t\t\t\t'results': answer\r\n// \t\t\t\t}\r\n// \t\t\t})\r\n// \t\t}, 50)\r\n// \t})\r\n// }\r\n\r\n","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionAnswerJson, IQuestionGroup, IQuestionGroupJson, IQuestionsState } from './types';\r\n\r\nimport { addAnswer, AnswerActionTypes, storeAnswer } from '../Answers/actions'\r\nimport { IAnswer, IAnswerState } from '../Answers/types';\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\nimport { SUPPORT_QUESTIONS } from './reducer';\r\n\r\nimport data from \"./data.json\"\r\n\r\nconst parseFromJson = () : IQuestionGroup[] =>  {\r\n\treturn data.map(g => parseDates(g));\r\n}\r\n\r\nconst parseFromLocalStorage = (arr: IQuestionGroupJson[]) : IQuestionGroup[] =>  {\r\n\treturn arr.map(g => parseDates(g));\r\n}\r\n\r\nconst parseDates = (g: IQuestionGroupJson): IQuestionGroup => {\r\n\treturn {\r\n\t\t...g, \r\n\t\tquestions: g.questions.map(q => ({ \r\n\t\t\t...q,\r\n\t\t\tanswers: q.answers.map(a => ({...a, assigned: new Date(a.assigned)})),\r\n\t\t\tcreated: new Date(q.created)\r\n\t\t})),\t\r\n\t\tcreated: new Date(g.created)\r\n\t}\r\n}\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tTOGGLE_GROUP = 'EXPAND_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\r\n\t// question answers\r\n\tREMOVE_QUESTION_ANSWER = 'REMOVE_QUESTION_ANSWER',\r\n\tASSIGN_QUESTION_ANSWER = 'ASSIGN_QUESTION_ANSWER',\r\n\t// localSTorage\r\n\tSET_IS_DETAIL = 'SET_IS_DETAIL',\r\n\tSET_LAST_ANSWER_ID = 'SET_LAST_ANSWER_ID'\r\n}\r\n\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n\tquestionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestionId: number;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number,\r\n\ttext: string\r\n\t//questionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\t//groupId: number\r\n}\r\n\r\nexport interface IToggleGroup {\r\n\ttype: QuestionActionTypes.TOGGLE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\n\r\n// question answers\r\nexport interface IRemoveQuestionAnswer {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\nexport interface IAssignQuestionAnswer {\r\n\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number,\r\n\ttekst?: string\r\n}\r\n\r\nexport interface ISetIsDetail {\r\n\ttype: QuestionActionTypes.SET_IS_DETAIL;\r\n\tisDetail: boolean\r\n}\r\n\r\nexport interface IAddAndAssignNewAnswer {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswer: IAnswer;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\tIAddGroup | IToggleGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\tIRemoveQuestionAnswer | IAssignQuestionAnswer |\r\n\tISetIsDetail | \r\n\tIAddAndAssignNewAnswer;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\nexport const addAndAssignNewAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IAnswerState, null, IStore>\r\n> = (groupId: number, questionId: number, answer: IAnswer, formMode: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch<any>(addAnswer());\r\n\t\t\tdispatch<any>(storeAnswer(answer, formMode))\r\n\t\t\t\t.then((answerId: number) => {\r\n\t\t\t\t\tconsole.log('answerId', answerId)\r\n\t\t\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId))\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t} \r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IGetAll>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tlet questionGroups: IQuestionGroup[] = [];\r\n\t\t\tif (isWebStorageSupported()) {\r\n\t\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\t\tconsole.log('sQuestions', sQuestions)\r\n\t\t\t\tif (sQuestions !== null) {\r\n\t\t\t\t\tconst groups = JSON.parse(sQuestions);\r\n\t\t\t\t\tquestionGroups = parseFromLocalStorage(groups);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tquestionGroups = parseFromJson();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tquestionGroups = parseFromJson();\r\n\t\t\t}\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n\t\t\t\tquestionGroups\r\n\t\t\t});\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, string, IGet>\r\n> = (questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IAdd>\r\n> = (groupId: number, text: string, canEdit?: boolean) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ADD_QUESTION,\r\n\t\t\t\tgroupId,\r\n\t\t\t\ttext\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.EDIT_QUESTION,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const selectQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t\t\tgroupId: groupId,\r\n\t\t\t\tquestionId: questionId,\r\n\t\t\t\tanswerId: answerId,\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const copyQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t\t\tgroupId: groupId,\r\n\t\t\t\tquestionId: questionId,\r\n\t\t\t\tanswerId: answerId,\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t\t\tgroupId: groupId,\r\n\t\t\t\tquestionId: questionId,\r\n\t\t\t\tanswerId: answerId,\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const assignQuestionAnswer: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number, tekst?: string) => {\r\n\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay();\r\n\t\t\t// warning: store answer, after upodate, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER,\r\n\t\t\t\tgroupId,\r\n\t\t\t\tquestionId,\r\n\t\t\t\tanswerId\r\n\t\t\t});\r\n\t\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const setIsDetail: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, ISetIsDetail>\r\n> = (isDetail: boolean) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.SET_IS_DETAIL,\r\n\t\t\t\tisDetail\r\n\t\t\t});\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const storeQuestion: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tif (formMode === 'add') {\r\n\t\t\t\tawait delay();\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\t\tquestion\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tawait delay();\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\t\tquestion\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data': {\r\n\t\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IAddGroup>\r\n> = () => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.ADD_GROUP\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const toggleGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.TOGGLE_GROUP,\r\n\t\t\t\tgroupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\nexport const editGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.EDIT_GROUP,\r\n\t\t\t\tgroupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\tawait delay()\r\n\t\t\t// warning: store answer, after update, to local storage\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.REMOVE_GROUP,\r\n\t\t\t\tgroupId: groupId\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n\tThunkAction<Promise<any>, IQuestionsState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n\treturn async (dispatch: Dispatch) => {\r\n\t\ttry {\r\n\t\t\t// await updateGroupFromLocalStorage(group);\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\t\tgroup\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\n/*\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\t  resolve({\r\n\t\t\t\t 'status': 200,\r\n\t\t\t\t 'content-type': 'application/json',\r\n\t\t\t\t 'data' : {\r\n\t\t\t\t\t'results': storageQuestionsByGroups\r\n\t\t\t\t }\r\n\t\t\t  })\r\n\t\t\t}, 250)\r\n\t})\r\n}\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data': {\r\n\t\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n*/\r\n","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// Import User Typing\r\nimport { IUser, IUserState } from './types';\r\nimport data from \"./data.json\"\r\nconst storageUsersDemo: IUser[] = data;\r\n\r\n// Create Action Constants\r\nexport enum UserActionTypes {\r\n\tGET_ALL_USERS = 'GET_ALL_USERS',\r\n  \tGET_USER = 'GET_USER'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: UserActionTypes.GET_ALL_USERS;\r\n\tusers: IUser[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: UserActionTypes.GET_USER;\r\n\tuser: IUser;\r\n}\r\n\r\n// localStorage\r\nexport const SUPPORT_USERS = 'SUPPORT_USERS' \r\nconst storageUsers: IUser[] = [\r\n]\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type UserActions = IGetAll | IGet;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllUsers: ActionCreator<\r\n  ThunkAction<Promise<any>, IUserState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sUsers = localStorage.getItem(SUPPORT_USERS);\r\n\t\t\tif (sUsers !== null) {\r\n\t\t\t\tconst Users: IUser[] = JSON.parse(sUsers);\r\n\t\t\t\tUsers.map(g => storageUsers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageUsersDemo.map(g => storageUsers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageUsersDemo.map(g => storageUsers.push(g))\r\n\t\t}\r\n\r\n\t\t//const response = await getUsersFromLocalStorage(); \r\n      dispatch({\r\n        type: UserActionTypes.GET_ALL_USERS,\r\n        users: storageUsers //response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\n// const getUsersFromLocalStorage = (): Promise<any> => {\r\n// \treturn new Promise((resolve, reject) => {\r\n// \t\tsetTimeout(() => {\r\n//   \t\t  resolve({\r\n//   \t\t\t 'status': 200,\r\n//   \t\t\t 'content-type': 'application/json',\r\n//   \t\t\t 'data' : {\r\n//   \t\t\t\t'results': storageUsers\r\n//   \t\t\t }\r\n//   \t\t  })\r\n//   \t\t}, 50)\r\n//   \t })\r\n//   }\r\n\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n\tQuestionActions,\r\n\tQuestionActionTypes\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup, IQuestionsState } from './types'\r\n\r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS';\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tsource: 0,\r\n\tstatus: 0,\r\n\tanswers: [],\r\n\tcreatedBy: 0,\r\n\tcreated: new Date()\r\n};\r\n\r\nexport const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: [],\r\n\tisExpanded: false,\r\n\tcreatedBy: 1,\r\n\tcreated: new Date()\r\n};\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionsState: IQuestionsState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tgroupOptions: [],\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: -1,\r\n\tisDetail: false\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nconst aTypesToSTore = Object.keys(QuestionActionTypes)\r\n\t.filter(a => a !== QuestionActionTypes.GET_ALL_QUESTIONS);\r\n\r\nexport const questionReducer: Reducer<IQuestionsState, QuestionActions> = (state, action) => {\r\n\tconst newState = myReducer(state, action);\r\n\tif (aTypesToSTore.includes(action.type)) {\r\n\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(newState.questionGroups));\r\n\t}\r\n\treturn newState;\r\n}\r\n\r\nconst myReducer: Reducer<IQuestionsState, QuestionActions> = (\r\n\tstate = initialQuestionsState,\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\tconst {questionGroups} = action;\r\n\t\t\tfor (let section of questionGroups)\r\n\t\t\t\tfor (let question of section.questions)\r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\tconst groupOptions = questionGroups.map(g => ({value: g.groupId, label: g.title}))\r\n\t\t\tgroupOptions.unshift({value: 0, label: 'Unknown'})\r\n\t\t\tconsole.log('groupOptions', groupOptions)\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups,\r\n\t\t\t\tgroupOptions\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of state.questionGroups) {\r\n\t\t\t\tquestion = section.questions\r\n\t\t\t\t\t.find(question => question.questionId === action.questionId);\r\n\t\t\t\tif (question)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\t// const questionGroup = state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\t// const questionId = questionGroup!.questions.length === 0\r\n\t\t\t// \t? 1\r\n\t\t\t// \t: Math.max(...questionGroup!.questions.map(q => q.questionId)) + 1;\r\n\t\t\tlet questionIdMax = 0;\r\n\t\t\tfor (let section of state.questionGroups) {\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tif (question.questionId > questionIdMax)\r\n\t\t\t\t\t\tquestionIdMax = question.questionId\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: { \r\n\t\t\t\t\t...initialQuestion, \r\n\t\t\t\t\tgroupId: action.groupId, \r\n\t\t\t\t\tquestionId: questionIdMax + 1,\r\n\t\t\t\t\ttext: action.text\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\tconst questionGroup = state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tconst question = questionGroup!.questions\r\n\t\t\t\t.find(question => question.questionId === action.questionId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tquestion\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\tconst { question } = action;\r\n\t\t\t\tconsole.log('question', question)\r\n\t\t\t\tif (question.groupId === 0 && !state.questionGroups.map(g => g.groupId).includes(0)) {\r\n\t\t\t\t\tconsole.log('unisao')\r\n\t\t\t\t\t// do something\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...state,\r\n\t\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\t\tquestionGroups: [\r\n\t\t\t\t\t\t\t...state.questionGroups,\r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t...initialQuestionGroup, \r\n\t\t\t\t\t\t\t\tgroupId: 0,\r\n\t\t\t\t\t\t\t\ttitle: 'Unknown',\r\n\t\t\t\t\t\t\t\tquestions: [question]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== question.groupId ?\r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] }\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...question }] }\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst { questionGroups } = state;\r\n\t\t\t\tconst {question} = action;\r\n\t\t\t\tconst questionId: number = question.groupId;\r\n\t\t\t\tconsole.log('STORE_QUESTION', question)\r\n\t\t\t\tconsole.log('questionGroups', questionGroups)\r\n\t\t\t\tconst g = questionGroups.find(g => g.groupId === question.groupId);\r\n\t\t\t\tconsole.log('g', questionGroups, g)\r\n\t\t\t\tconst q = g!.questions.find(q => q.questionId === question.questionId);\r\n\t\t\t\tconsole.log('Q', q)\r\n\t\t\t\tif (q) { // change question\r\n\t\t\t\t\tconsole.log(\"MEWNJAMMMMMMMMMMM\")\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...state,\r\n\t\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\t\tquestionGroups: questionGroups.map(g => g.groupId !== question.groupId\r\n\t\t\t\t\t\t\t? { ...g, questions: [...g.questions]\t}\r\n\t\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t\t...g, \r\n\t\t\t\t\t\t\t\tquestions: g.questions\r\n\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== question.questionId ?\r\n\t\t\t\t\t\t\t\t\t\tq : { ...question }\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\telse { // assing question to another group\r\n\t\t\t\t\tconsole.log(\"REASSIGNNNNNNNNNNNNNNNNNNNNNNN\", question)\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...state,\r\n\t\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\t\tquestionGroups: questionGroups.map(g => g.groupId !== question.groupId\r\n\t\t\t\t\t\t\t? { ...g, questions: [...g.questions.filter(q=> q.questionId !== question.questionId)]\t}\r\n\t\t\t\t\t\t\t: {\t...g, questions: [...g.questions, { ...question } ]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display',\r\n\t\t\t\tquestion: undefined,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ?\r\n\t\t\t\t\t{ ...g, questions: [...g.questions] }\r\n\t\t\t\t\t:\r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId) }\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Question answers\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ?\r\n\t\t\t\t\t{ ...g, questions: [...g.questions] }\r\n\t\t\t\t\t:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t\t\t{ ...q, answers: [...q.answers] }\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t{ ...q, answers: q.answers.filter(qa => qa.answerId !== action.answerId) }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ASSIGN_QUESTION_ANSWER: {\r\n\t\t\t//const answerId = action.answerId === -1 ? state.questionGroups.lastIndexOf : action.answerId;\r\n\t\t\tconst { groupId, questionId, answerId } = action;\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== groupId\r\n\t\t\t\t\t? { ...g, questions: [...g.questions] }\r\n\t\t\t\t\t: {\r\n\t\t\t\t\t\t...g, questions: g.questions.map(q => q.questionId !== questionId\r\n\t\t\t\t\t\t\t? { ...q, answers: [...q.answers] }\r\n\t\t\t\t\t\t\t: { ...q, answers: [...q.answers, { answerId, assignedBy: 1, assigned: new Date() }] }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.SET_IS_DETAIL: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisDetail: action.isDetail\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\tlet groupId = Math.max(...state.questionGroups.map(g => g.groupId)) + 1\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId }]\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.TOGGLE_GROUP: {\r\n\t\t\tconsole.log(action)\r\n\t\t\tconst group = state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId\r\n\t\t\t\t\t? g\r\n\t\t\t\t\t: { ...g, isExpanded: !g.isExpanded }\r\n\t\t\t\t)\r\n\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\tconst group = state.questionGroups.find(g => g.groupId === action.groupId)\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: group!.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: -1,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ?\r\n\t\t\t\t\tg\r\n\t\t\t\t\t:\r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions] })\r\n\t\t\t\t\treturn acc\r\n\t\t\t\t}, [])\r\n\t\t\t};\r\n\t\t}\r\n\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n\tAnswerActions,\r\n\tAnswerActionTypes,\r\n\tSUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport { IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\toptions: [],\r\n\tcreatedBy: 0,\r\n\tcreated: new Date()\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tanswer: undefined,\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\nconst aTypesToSTore = Object.keys(AnswerActionTypes).filter(a => a !== AnswerActionTypes.GET_ALL_ANSWERS);\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (state, action) => {\r\n\tconst newState = myReducer(state, action);\r\n\tif (aTypesToSTore.includes(action.type)) {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(newState.answers));\r\n\t}\r\n\treturn newState;\r\n}\r\n\r\nconst myReducer: Reducer<IAnswerState, AnswerActions> = (\r\n\tstate = initialAnswerState,\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\r\n\t\tcase AnswerActionTypes.GET_ALL_ANSWERS: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswers: action.answers.map(answer => { return { \r\n\t\t\t\t\t...answer,\r\n\t\t\t\t\twords: answer.text.split(' ') \r\n\t\t\t\t} }),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.GET_ANSWER: {\r\n\t\t\tconst answer = state.answers.find(a => a.answerId === action.answerId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tanswer\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.ADD_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tanswer: {\r\n\t\t\t\t\t...initialAnswer,\r\n\t\t\t\t\tanswerId: state.answers.length === 0 \r\n\t\t\t\t\t\t? 1\r\n\t\t\t\t\t\t: Math.max(...state.answers.map(a => a.answerId)) + 1\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.EDIT_ANSWER: {\r\n\t\t\tconst answer = state.answers.find(a => a.answerId === action.answerId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tanswer: { ...answer!, words: answer!.text.split(' ') }\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\t\tconst { answer } = action;\r\n\t\t\tlet { answerId } = answer!;\r\n\t\t\tlet answers = [];\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\tif (answerId === -1) {\r\n\t\t\t\t\tanswer.answerId = state.answers.length === 0\r\n\t\t\t\t\t\t? 1\r\n\t\t\t\t\t\t: Math.max(...state.answers.map(a => a.answerId)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\tanswers = [...state.answers, { ...answer, words: answer.text.split(' ') }]\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tanswers = state.answers.map(a => a.answerId === answerId\r\n\t\t\t\t\t? { ...answer, words: answer.text.split(' ') }\r\n\t\t\t\t\t: a)\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tanswers,\r\n\t\t\t\tanswer\r\n\t\t\t};\r\n\t\t}\t\r\n\r\n\t\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display'\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display',\r\n\t\t\t\tanswers: state.answers.filter(a => a.answerId !== action.answerId)\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// case AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\t// \tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\t// \treturn state;\r\n\t\t// }   \t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  UserActions,\r\n  UserActionTypes\r\n} from './actions';\r\n\r\nimport {IUser, IUserState } from './types'\r\n\r\nconst initialUser: IUser = {\r\n\tuserId: 0,\r\n\tname: '',\r\n\trole: 'Admin',\r\n\tdepartment: 'Development'\r\n};\r\n\r\nconst initialUserState: IUserState = {\r\n\tusers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const userReducer: Reducer<IUserState, UserActions> = (\r\n  state = initialUserState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n\r\n   case UserActionTypes.GET_ALL_USERS: {\r\n\t\treturn {\r\n        ...state,\r\n        users: action.users.map(user => ({...user}) ),\r\n      };\r\n\t} \r\n\r\n \tcase UserActionTypes.GET_USER: {\r\n      return {\r\n\t\t  ...state,\r\n        user: action.user\r\n      };\r\n\t}    \r\n\r\n\tdefault:\r\n   \t\treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { questionReducer } from '../Questions/reducer';\r\nimport { answerReducer } from '../Answers/reducer';\r\n\r\nimport { IAnswerState } from '../Answers/types';\r\nimport { IQuestionsState } from '../Questions/types';\r\nimport { IUserState } from '../user/types';\r\nimport { userReducer } from '../user/reducer';\r\n\r\nexport interface IAppState {\r\n  questionsState: IQuestionsState;\r\n  answerState: IAnswerState;\r\n  userState: IUserState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionsState: questionReducer,\r\n  answerState: answerReducer,\r\n  userState: userReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\nimport { createRef } from 'react'\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup } from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\nlet inputAutosuggest = createRef<HTMLInputElement>();\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new(): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\nexport class AutoSuggest extends React.Component<{ questionGroups: IQuestionGroup[], tekst: string, onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t//inputAutosuggest: React.RefObject<HTMLInputElement>;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvalue: props.tekst || '',\r\n\t\t\tsuggestions: this.getSuggestions(''),\r\n\t\t\thighlighted: ''\r\n\t\t};\r\n\t\t//this.inputAutosuggest = createRef<HTMLInputElement>();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tsetTimeout(() => {\r\n\t\t\t//inputAutosuggest!.current!.focus();\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\twindow.focus()\r\n\t\t\t\tinputAutosuggest!.current!.focus();\r\n\t\t\t}, 500)\r\n\r\n\t\t}, 100)\r\n\r\n\t\t// console.log('componentDidMount', document)\r\n\t\t// console.log(document?.getElementById('inputAutoSuggest'))\r\n\t\t//document?.getElementById('inputAutoSuggest')?.focus(); \r\n\t}\r\n\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\tconst { value, suggestions } = this.state;\r\n\r\n\t\treturn <QuestionAutosuggestMulti\r\n\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\tmultiSection={true}\r\n\t\t\tsuggestions={suggestions}\r\n\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\tonSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\tgetSuggestionValue={this.getSuggestionValue}\r\n\t\t\trenderSuggestion={this.renderSuggestion}\r\n\t\t\trenderSectionTitle={this.renderSectionTitle}\r\n\t\t\tgetSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t// onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\tonSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}\r\n\t\t\thighlightFirstSuggestion={true}\r\n\t\t\trenderInputComponent={this.renderInputComponent}\r\n\t\t\trenderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\tinputProps={{\r\n\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\tvalue,\r\n\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent)\r\n\t\t\t}}\r\n\r\n\t\t/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t\tsuggestions: []\r\n\t\t});\r\n\t};\r\n\r\n\r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\tconst question: IQuestion = data.suggestion;\r\n\t\t// alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\tthis.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\r\n\t\treturn (\r\n\t\t\t<span>\r\n\t\t\t\t{parts.map((part, index) => {\r\n\t\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<span className={className} key={index}>\r\n\t\t\t\t\t\t\t{part.text}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\treturn <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.RenderInputComponentProps): JSX.Element {\r\n\t\tconst { ref, ...restInputProps } = inputProps;\r\n\t\t// if (ref !== undefined)\r\n\t\t// \tthis.inputAutosuggest = ref as React.RefObject<HTMLInputElement>;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input {...restInputProps} ref={inputAutosuggest} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({ containerProps, children, query }: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\treturn (\r\n\t\t\t<div {...containerProps}>\r\n\t\t\t\t<span>{children}</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t// endregion region Event handlers\r\n\r\n\tprotected onChange(event: /*React.ChangeEvent<HTMLInputElement>*/ React.FormEvent<any>, { newValue, method }: Autosuggest.ChangeEvent): void {\r\n\t\tthis.setState({ value: newValue });\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({ value }: any): void {\r\n\t\tthis.setState({\r\n\t\t\tsuggestions: this.getSuggestions(value)\r\n\t\t});\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]): boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i'))\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...group,\r\n\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\treturn suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\treturn section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\tthis.setState({\r\n\t\t\thighlighted: params.suggestion\r\n\t\t});\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\nimport { IAnswer }  from '../Answers/types'\r\nimport './AutoSuggest.css'\r\nimport { IQuestion } from '../Questions/types';\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IAnswer> };\r\n\r\ninterface IProps {\r\n\tanswersUnassigned: IAnswer[], \r\n\tquestion: IQuestion,\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void\r\n\tsetAnswerText?: (val: string) => void\r\n}\r\n\r\nexport class AutoSuggestAnswer extends React.Component<IProps, any> {\r\n\r\n\tstate: any;\r\n\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={false}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Search answers...`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IAnswer>): void {\r\n\t\t const answer: IAnswer = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.answerId} (${question.text}).`);\r\n\t\t this.props.assignQuestionAnswer(\r\n\t\t\t this.props.question.groupId,\r\n\t\t\t this.props.question.questionId, \r\n\t\t\t answer.answerId);\r\n\t\tthis.setState({\r\n\t\t\tvalue: ''\r\n\t\t})\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IAnswer, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IAnswer>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\tif (this.props.setAnswerText) {\r\n\t\t\tthis.props.setAnswerText(newValue);\r\n\t\t}\r\n\t\tthis.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IAnswer[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\treturn this.props.answersUnassigned.filter(answer => this.anyWord(valueWordRegex, answer.words!))\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IAnswer) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n \r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit, faCopy } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion, IQuestionAnswer } from '../types';\r\n\r\n\r\ninterface IQuestionAnswerRowProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswer: IQuestionAnswer;\r\n\tselectQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tcopyQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n}\r\n\r\nconst QuestionAnswerRow: React.FC<IQuestionAnswerRowProps> = (props: IQuestionAnswerRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\tconst { question, questionAnswer, selectQuestionAnswer, copyQuestionAnswer, removeQuestionAnswer } = props;\r\n\tconst { groupId, questionId } = question;\r\n\tconst { answerId, text } = questionAnswer;\r\n\tconst id = `inputQuestionAnswer${answerId}`;\r\n\r\n\treturn (\r\n\t\t<div ref={hoverRef} className=\"name\">\r\n\t\t\t{/* <input id={id} type=\"hidden\" value={questionAnswer.text}></input> */}\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\t// selectQuestionAnswer(groupId, questionId, answerId)}\r\n\t\t\t\t\talert('No action for the time being')\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{questionAnswer.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Copy Resolution to Cliboard\"\r\n\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\t//const input = document.querySelector<HTMLInputElement>('#' + id);\r\n\t\t\t\t\t\tif (navigator.clipboard) {\r\n\t\t\t\t\t\t\tnavigator.clipboard.writeText(`${questionAnswer.text}`) // input!.value)\r\n\t\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\t\tconsole.log('Copied to clipboard successfully.');\r\n\t\t\t\t\t\t\t\t}, (err) => {\r\n\t\t\t\t\t\t\t\t\tconsole.log('Failed to copy the text to clipboard.', err);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t// copyQuestionAnswer(groupId, questionId, answerId);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faCopy} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove\" onClick={() => removeQuestionAnswer(groupId, questionId, answerId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionAnswerRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus, faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion, IQuestionAnswer } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AutoSuggestAnswer } from '../../components/AutoSuggestAnswer';\r\nimport QuestionAnswerRow from './QuestionAnswerRow';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IQuestionAnswer[],\r\n\tanswers?: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string,\r\n\tselectQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void,\r\n\tcopyQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void,\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void,\r\n\tassignQuestionAnswer?: (groupId: number, questionId: number, answerId: number, tekst?: string) => void,\r\n\tsetAnswerText?: (val: string) => void,\r\n\tsetIsDetail: (isDetail: boolean) => void\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n\tconst { \r\n\t\tquestion, \r\n\t\tquestionAnswers, \r\n\t\tanswers, \r\n\t\tcanEdit, \r\n\t\tformMode, \r\n\t\tselectQuestionAnswer, copyQuestionAnswer, removeQuestionAnswer, \r\n\t\tassignQuestionAnswer, setIsDetail \r\n\t} = props; \r\n\tconst answersUnassigned = answers?.filter(a => !question.answers.map(a=>a.answerId).includes(a.answerId))\r\n\r\n\tconst [tekst, setTekst] = React.useState('');\r\n\tconst setAnswerText = (val: string) => {\r\n\t\tsetTekst(val);\r\n\t}\r\n\r\n\tconst assignQuestionAnswerTekst = () => {\r\n\t\tif (assignQuestionAnswer) {\r\n\t\t\t//storeAnswer({ answerId: -1, text: tekst }, 'add')\r\n\t\t\tassignQuestionAnswer(\r\n\t\t\t\tquestion.groupId,\r\n\t\t\t\tquestion.questionId, \r\n\t\t\t\t-1,\r\n\t\t\t\ttekst\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tconst goDetail = (isDetail: boolean) => {\r\n\t\tsetIsDetail(isDetail);\r\n\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.add('detail-view-open');\r\n\t\tdivDetailView!.style.zIndex = '3';\r\n\t\t//document.body.classList.add('hide-scroll-bar');\r\n  \t}\t\r\n\r\n\r\n    return (\r\n      <div className=\"name-container question-answers\">\r\n\t\t\t{/* { questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t} */}\r\n\t\t\t{ questionAnswers.length > -1 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table width=\"100%\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>{ questionAnswers.length === 0 ? 'No resolutions yet' : 'Resolutions'}</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(qa => \r\n\t\t\t\t\t\t\t<tr key={qa.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\" title={`AnswerId:${qa.answerId}\\nAssigned: ${qa.assigned.toLocaleDateString()} ${qa.assigned.toLocaleTimeString()}`}>\r\n\t\t\t\t\t\t\t\t\t<QuestionAnswerRow\r\n\t\t\t\t\t\t\t\t\t\tkey={qa.answerId}\r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswer={qa}\r\n\t\t\t\t\t\t\t\t\t\tselectQuestionAnswer={selectQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tcopyQuestionAnswer={copyQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{/* <td className=\"name\" title={`AnswerId:${qa.answerId}\\nAssigned: ${qa.assigned.toLocaleDateString()} ${qa.assigned.toLocaleTimeString()}`}>\r\n\t\t\t\t\t\t\t\t\t{qa.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => { \r\n\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer!(question.groupId, question.questionId, qa.answerId)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t} */}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{canEdit && formMode !== 'display' && <tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<AutoSuggestAnswer\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tanswersUnassigned={answersUnassigned!}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer!}\r\n\t\t\t\t\t\t\t\t\tsetAnswerText={setAnswerText}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td width=\"35px\">\r\n\t\t\t\t\t\t\t\t<button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => goDetail(true)}>\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPlus} color='lightblue' />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from \"react\";\r\n\r\ntype OptionValue = string | number;\r\n\r\nexport type IOption<T extends OptionValue> = {\r\n    value: T;\r\n    label: string;\r\n};\r\n\r\ntype Props<T extends OptionValue> = {\r\n    options: IOption<T>[];\r\n    value: T;\r\n    onChange: (e: React.FormEvent<HTMLSelectElement>, value: T) => void;\r\n    id: string,\r\n    name: string,\r\n    disabled?: boolean\r\n};\r\n\r\nexport function Select<T extends OptionValue>(props: Props<T>) {\r\n    const disabled = props.disabled ? true : false;\r\n    function handleOnChange(e: React.FormEvent<HTMLSelectElement>) {\r\n        const { selectedIndex } = e.currentTarget;\r\n        const selectedOption: IOption<T> = props.options[selectedIndex];\r\n        props.onChange(e, selectedOption.value);\r\n    }\r\n\r\n    return (\r\n        <select\r\n            id={props.id}\r\n            value={props.value}\r\n            onChange={handleOnChange}\r\n            disabled={disabled}\r\n        >\r\n            {props.options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                    {option.label}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    );\r\n}","const palx = require('palx');\r\nexport const BASE_COLOR = '#666ee8';\r\nexport const COLORS = palx(BASE_COLOR);","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion, IQuestionAnswer } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\nimport { Select } from '../../common/Select';\r\nimport { IOption } from '../../common/Select'\r\nimport { COLORS } from '../../formik/theme';\r\n\r\ninterface IProps {\r\n  question: IQuestion;\r\n  questionAnswers: IQuestionAnswer[];\r\n  answers: IAnswer[];\r\n  formMode: string;\r\n  canEdit: boolean,\r\n  cancel: () => void;\r\n  saveForm: (question: IQuestion, formMode: string) => void;\r\n  selectQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  copyQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  removeQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  assignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  setIsDetail: (isDetail: boolean) => void;\r\n  userOptions: IOption<number>[];\r\n  sourceOptions: IOption<number>[];\r\n  statusOptions: IOption<number>[];\r\n  groupOptions: IOption<number>[];\r\n}\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      groupId: props.question.groupId,\r\n      questionId: props.question.questionId,\r\n      text: props.question.text,\r\n      source: props.question.source,\r\n      status: props.question.status,\r\n      answers: props.question.answers,\r\n      createdBy: props.question.createdBy,\r\n      created: props.question.created\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      props.saveForm(values, props.formMode)\r\n    }\r\n  });\r\n\r\n  const isEdit = () => props.formMode === 'edit';\r\n\r\n  console.log('RENDERING', formik.values)\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit}>\r\n      \r\n        <label className=\"id\" htmlFor=\"questionId\">QuestionId:</label>\r\n        {/* <input\r\n          id=\"questionId\"\r\n          name=\"questionId\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.questionId}\r\n          disabled\r\n          style={{ width: '50px' }}\r\n        />\r\n        {formik.touched.questionId && formik.errors.questionId ? (\r\n          <div>{formik.errors.questionId}</div>\r\n        ) : null} */}\r\n        <span id=\"questionId\">{formik.values.questionId}</span>\r\n\r\n        <label htmlFor=\"groupId\">Group</label>\r\n        <Select\r\n          id=\"groupId\"\r\n          name=\"groupId\"\r\n          options={props.groupOptions}\r\n          //onChange={formik.handleChange}\r\n          onChange={(e, value) => {\r\n            formik.setFieldValue(\"groupId\", value);\r\n            if (isEdit()) formik.submitForm();\r\n          }}\r\n          value={formik.values.groupId}\r\n        />\r\n\r\n        <label htmlFor=\"text\">Name</label>\r\n        <textarea\r\n          id=\"text\"\r\n          name=\"text\"\r\n          onChange={formik.handleChange}\r\n          //onBlur={formik.handleBlur}\r\n          onBlur={(e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n            if (isEdit()) formik.submitForm();\r\n          }}\r\n          value={formik.values.text}\r\n          style={{ width: '100%' }}\r\n          rows={2}\r\n        />\r\n        {formik.touched.text && formik.errors.text ? (\r\n          <div>{formik.errors.text}</div>\r\n        ) : null}\r\n\r\n        <label htmlFor=\"source\">Source</label>\r\n        <Select\r\n          id=\"source\"\r\n          name=\"source\"\r\n          options={props.sourceOptions}\r\n          // onChange={formik.handleChange}\r\n          onChange={(e, value) => {\r\n            formik.setFieldValue(\"source\", value)\r\n            if (isEdit()) formik.submitForm();\r\n          }}\r\n          value={formik.values.source}\r\n        />\r\n\r\n        <br />\r\n        <QuestionAnswers\r\n          question={props.question}\r\n          questionAnswers={props.questionAnswers}\r\n          answers={props.answers}\r\n          canEdit={props.canEdit}\r\n          formMode={props.formMode}\r\n          selectQuestionAnswer={props.selectQuestionAnswer}\r\n          copyQuestionAnswer={props.copyQuestionAnswer}\r\n          removeQuestionAnswer={props.removeQuestionAnswer}\r\n          assignQuestionAnswer={props.assignQuestionAnswer}\r\n          setIsDetail={props.setIsDetail}\r\n        />\r\n        <br />\r\n\r\n        <label htmlFor=\"status\">Status</label>\r\n        <Select\r\n          id=\"status\"\r\n          name=\"status\"\r\n          options={props.statusOptions}\r\n          //onChange={formik.handleChange}\r\n          onChange={(e, value) => {\r\n            formik.setFieldValue(\"status\", value)\r\n            if (isEdit()) formik.submitForm();\r\n          }}\r\n          value={formik.values.status}\r\n        />\r\n\r\n        <label htmlFor=\"createdBy\">Created by</label>\r\n        <Select\r\n          id=\"createdBy\"\r\n          name=\"createdBy\"\r\n          options={props.userOptions}\r\n          //onChange={formik.handleChange}\r\n          onChange={(e, value) => {\r\n            formik.setFieldValue(\"createdBy\", value);\r\n            if (isEdit()) formik.submitForm();\r\n          }}\r\n          value={formik.values.createdBy}\r\n        // onChange={(gradeId: number) =>\r\n        // \tdispatch({\r\n        // \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n        // \t\tstudentGradeIds: {\r\n        // \t\t\tstudentId: student!.id,\r\n        // \t\t\tgradeId: gradeId,\r\n        // \t\t\tgradeName: gradesAll[gradeId].name\r\n        // \t\t}\r\n        // \t})\r\n        // }\r\n        />\r\n\r\n        {/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n        {/* <button type=\"submit\">Submit</button> */}\r\n\r\n        {!isEdit() &&\r\n          <div className=\"buttons\">\r\n            {props.canEdit &&\r\n              <button onClick={() => props.cancel()}>Cancel</button>}\r\n            {props.canEdit &&\r\n              <button type=\"submit\">Save</button>}\r\n          </div>\r\n        }\r\n      </form>\r\n\r\n      <label className=\"id\" htmlFor=\"created\">Created:</label>\r\n      {/* <input\r\n        id=\"created\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.created.toLocaleDateString()}\r\n        disabled={true}\r\n      />\r\n      {formik.touched.created && formik.errors.created ? (\r\n        <div>{formik.errors.created}</div>\r\n      ) : null} */}\r\n      <span>{formik.values.created.toLocaleDateString()}</span>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nconst color = 'blue';\r\n\r\nexport const QuestionForm: React.FC<IProps> = (props: IProps) => {\r\n  return (\r\n    <div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n      <div\r\n        style={{\r\n          height: '100%',\r\n          background: COLORS[color][5],\r\n          padding: '1rem 1rem',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            borderRadius: '4px',\r\n            boxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n            background: '#fff',\r\n            maxWidth: '90%',\r\n            margin: '0 auto',\r\n            padding: '1rem',\r\n          }}\r\n        >\r\n          <div className=\"formik-example formik-example--blue\">\r\n            <Form {...props} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { COLORS } from '../../formik/theme';\r\nimport { IOption, Select } from '../../common/Select'\r\nimport { IQuestion, IQuestionAnswer } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n  question: IQuestion;\r\n  questionAnswers: IQuestionAnswer[];\r\n  answers: IAnswer[];\r\n  formMode: string;\r\n  canEdit: boolean,\r\n  edit: () => void;\r\n  remove: () => void;\r\n  selectQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  copyQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  removeQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  assignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  setIsDetail: (isDetail: boolean) => void;\r\n  userOptions: IOption<number>[];\r\n  sourceOptions: IOption<number>[];\r\n  statusOptions: IOption<number>[];\r\n  groupOptions: IOption<number>[];\r\n}\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      groupId: props.question.groupId,\r\n      questionId: props.question.questionId,\r\n      text: props.question.text,\r\n      source: props.question.source,\r\n      status: props.question.status,\r\n      answers: props.question.answers,\r\n      createdBy: props.question.createdBy,\r\n      created: props.question.created,\r\n      userOptions: props.userOptions,\r\n      sourceOptions: props.sourceOptions,\r\n      statusOptions: props.statusOptions\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n      <label className=\"id\" htmlFor=\"questionId\">QuestionId:</label>\r\n      {/* <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.questionId}\r\n        disabled\r\n        style={{ width: '50px' }}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null} */}\r\n      <span id=\"questionId\">{formik.values.questionId}</span>\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <textarea\r\n        id=\"text\"\r\n        name=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n        disabled\r\n        style={{ width: '100%' }}\r\n        rows={2}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"createdBy\">Source</label>\r\n      <Select\r\n        id=\"source\"\r\n        name=\"source\"\r\n        options={formik.values.sourceOptions}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.source}\r\n        disabled={true}\r\n      />\r\n\r\n      <br />\r\n      <QuestionAnswers\r\n        question={props.question}\r\n        questionAnswers={props.questionAnswers}\r\n        canEdit={props.canEdit}\r\n        formMode={props.formMode}\r\n        selectQuestionAnswer={props.selectQuestionAnswer}\r\n        copyQuestionAnswer={props.copyQuestionAnswer}\r\n        removeQuestionAnswer={props.removeQuestionAnswer}\r\n        setIsDetail={props.setIsDetail}\r\n      />\r\n      <br />\r\n\r\n      <label htmlFor=\"status\">Status</label>\r\n      <Select\r\n        id=\"status\"\r\n        name=\"status\"\r\n        options={formik.values.statusOptions}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.status}\r\n        disabled={true}\r\n      />\r\n\r\n      <label htmlFor=\"createdBy\">Created by</label>\r\n      <Select\r\n        id=\"createdBy\"\r\n        name=\"createdBy\"\r\n        options={formik.values.userOptions}\r\n        onChange={formik.handleChange}\r\n        value={formik.values.createdBy}\r\n        disabled={true}\r\n      // onChange={(gradeId: number) =>\r\n      // \tdispatch({\r\n      // \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n      // \t\tstudentGradeIds: {\r\n      // \t\t\tstudentId: student!.id,\r\n      // \t\t\tgradeId: gradeId,\r\n      // \t\t\tgradeName: gradesAll[gradeId].name\r\n      // \t\t}\r\n      // \t})\r\n      // }\r\n      />\r\n\r\n\r\n      <label className=\"id\" htmlFor=\"created\">Created:</label>\r\n      {/* <input\r\n        id=\"created\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.created.toLocaleDateString()}\r\n      />\r\n      {formik.touched.created && formik.errors.created ? (\r\n        <div>{formik.errors.created}</div>\r\n      ) : null} */}\r\n\t\t\t<span>{formik.values.created.toLocaleDateString()}</span>\r\n\r\n      {/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n      {props.canEdit &&\r\n        <div className=\"buttons\">\r\n          <button onClick={() => props.edit()}>Edit</button>\r\n          <button onClick={() => props.remove()}>Remove</button>\r\n        </div>\r\n      }\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nconst color = 'blue';\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  return (\r\n    <div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n      <div\r\n        style={{\r\n          height: '100%',\r\n          background: COLORS[color][5],\r\n          padding: '1rem 1rem',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            borderRadius: '4px',\r\n            boxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n            background: '#fff',\r\n            maxWidth: '90%',\r\n            margin: '0 auto',\r\n            padding: '1rem',\r\n          }}\r\n        >\r\n          <div className=\"formik-example formik-example--blue\">\r\n            <Form {...props} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\tconst { groupId, questionId } = question;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && \r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit\" onClick={() => edit(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove\" onClick={() => remove(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit, faCaretRight, faCaretDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\ttoggleGroup: (groupId: number) => void;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, toggleGroup, editGroup, removeGroup } = props;\r\n\tconst {groupId, title, questions, isExpanded} = questionGroup;\r\n\r\n\treturn (\r\n\t\t<div ref={hoverRef} key={groupId} className=\"name\" >\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\ttitle=\"Expand\"\r\n\t\t\t\tonClick={() => toggleGroup(groupId)} \r\n\t\t\t\tstyle={{ marginLeft: '5px' }}\r\n\t\t\t>\r\n\t\t\t\t<FontAwesomeIcon icon={isExpanded?faCaretDown:faCaretRight} color='maroon' size='lg' />\r\n\t\t\t</button>\r\n\t\t\t<span className='question-group-title'>{title}</span>\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered && questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\nimport { COLORS } from '../../formik/theme';\r\nimport { Select } from '../../common/Select';\r\nimport { IOption } from '../../common/Select'\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[];\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n\tuserOptions: IOption<number>[];\r\n}\r\n\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n\tconst formik = useFormik({\r\n\t\tenableReinitialize: true,\r\n\t\tinitialValues: {\r\n\t\t\tanswerId: props.answer.answerId,\r\n\t\t\ttext: props.answer.text,\r\n\t\t\tcreatedBy: props.answer.createdBy,\r\n\t\t\tcreated: props.answer.created,\r\n\t\t},\r\n\t\tvalidationSchema: Yup.object({\r\n\t\t\ttext: Yup.string()\r\n\t\t\t\t.max(150, 'Must be 150 characters or less')\r\n\t\t\t\t.required('Required'),\r\n\t\t}),\r\n\t\tonSubmit: (values) => {\r\n\t\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\t\tprops.saveForm(values, props.formMode)\r\n\t\t},\r\n\t});\r\n\r\n\tconst isEdit = () => props.formMode === 'edit';\r\n\tconsole.log('RENDERING', formik.values)\r\n\r\n\treturn (\r\n\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t{props.formMode !== 'add' &&\r\n\t\t\t\t<>\r\n\t\t\t\t\t<label className=\"id\" htmlFor=\"answerId\">Answer Id: </label>\r\n\t\t\t\t\t{/* <input\r\n\t\t\t\t\t\tid=\"answerId\"\r\n\t\t\t\t\t\tname=\"answerId\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\t\t\tvalue={formik.values.answerId}\r\n\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t\tstyle={{ width: '50px' }}\r\n\t\t\t\t\t/> */}\r\n\t\t\t\t\t<span id=\"answerId\">{formik.values.answerId}</span>\r\n\t\t\t\t\t{/* {formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t\t\t) : null} */}\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\r\n\t\t\t<label htmlFor=\"text\">Resolution</label>\r\n\t\t\t<textarea\r\n\t\t\t\tid=\"text\"\r\n\t\t\t\tname=\"text\"\r\n\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\tonBlur={(e: React.FormEvent<HTMLTextAreaElement>): void => {\r\n\t\t\t\t\tif (isEdit()) formik.submitForm();\r\n\t\t\t\t}}\r\n\t\t\t\tvalue={formik.values.text}\r\n\t\t\t\trows={2}\r\n\t\t\t\tstyle={{ width: '100%' }}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.text && formik.errors.text ? (\r\n\t\t\t\t<div>{formik.errors.text}</div>\r\n\t\t\t) : null}\r\n\r\n\t\t\t<label htmlFor=\"createdBy\">Created by</label>\r\n\t\t\t<Select\r\n\t\t\t\tid=\"createdBy\"\r\n\t\t\t\tname=\"createdBy\"\r\n\t\t\t\toptions={props.userOptions}\r\n\t\t\t\t//onChange={formik.handleChange}\r\n\t\t\t\tonChange={(e, value) => {\r\n\t\t\t\t\tformik.setFieldValue(\"createdBy\", value)\r\n\t\t\t\t\tif (isEdit()) formik.submitForm();\r\n\t\t\t\t}}\r\n\t\t\t\tvalue={formik.values.createdBy}\r\n\t\t\t// onChange={(gradeId: number) =>\r\n\t\t\t// \tdispatch({\r\n\t\t\t// \t\ttype: StudentActionTypes.STUDENT_ASSIGN_GRADE,\r\n\t\t\t// \t\tstudentGradeIds: {\r\n\t\t\t// \t\t\tstudentId: student!.id,\r\n\t\t\t// \t\t\tgradeId: gradeId,\r\n\t\t\t// \t\t\tgradeName: gradesAll[gradeId].name\r\n\t\t\t// \t\t}\r\n\t\t\t// \t})\r\n\t\t\t// }\r\n\t\t\t/>\r\n\r\n\t\t\t<label className=\"id\" htmlFor=\"created\">Created:</label>\r\n\t\t\t{/* <input\r\n\t\t\t\tid=\"created\"\r\n\t\t\t\tname=\"text\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\tvalue={formik.values.created.toLocaleDateString()}\r\n\t\t\t\tdisabled={true}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.created && formik.errors.created ? (\r\n\t\t\t\t<div>{formik.errors.created}</div>\r\n\t\t\t) : null} */}\r\n\t\t\t<span>{formik.values.created.toLocaleDateString()}</span>\r\n\r\n\t\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t\t{!isEdit() &&\r\n\t\t\t\t<div className=\"buttons\">\r\n\t\t\t\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n\t\t\t\t\t<button type=\"submit\">Save</button>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nconst color = 'blue';\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n\treturn (\r\n\t\t<div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: '100%',\r\n\t\t\t\t\tbackground: COLORS[color][5],\r\n\t\t\t\t\tpadding: '0.1rem 0.1rem',\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tborderRadius: '4px',\r\n\t\t\t\t\t\tboxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n\t\t\t\t\t\tbackground: '#fff',\r\n\t\t\t\t\t\tmaxWidth: '90%',\r\n\t\t\t\t\t\tmargin: '0 auto',\r\n\t\t\t\t\t\tpadding: '0.5rem',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className=\"formik-example formik-example--blue\">\r\n\t\t\t\t\t\t<Form {...props} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useState, useEffect } from 'react'\r\n\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AnswerForm } from '../../Answers/components/Form'\r\nimport { IOption } from '../../common/Select'\r\nimport { assignQuestionAnswer } from '../actions';\r\nimport { COLORS } from '../../formik/theme';\r\nconst color = 'blue';\r\n\r\ninterface IProps {\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\taddAndAssignNewAnswer: (groupId: number, questionId: number, answer: IAnswer, formMode: string) => void,\r\n  \tuserOptions: IOption<number>[];\r\n\tlastAnswer?: IAnswer\r\n}\r\n\r\n//export default function DetailView() {\r\nexport const DetailView: React.FC<IProps> = (props: IProps) => {\r\n\r\n\t// const complete = ({name}) => dispatch({ type: 'TOGGLE', name: 'new Todo' })\r\n\tconst { groupId, questionId, lastAnswer, addAndAssignNewAnswer } = props;\r\n\tuseEffect(()=> {\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.addEventListener('animationend', () => {\r\n\t\t\tif (divDetailView!.classList.contains('detail-view-close')) {\r\n\t\t\t\tdivDetailView!.style.zIndex = '0';\r\n\t\t\t\tdivDetailView!.style.left = '100%';\r\n\t\t\t\tdivDetailView!.classList.remove('detail-view-close');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdivDetailView!.style.left = '60%';\r\n\t\t\t}\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst close = () => {\r\n\t\t// dispatch({ type: 'GO_BACK', page: \"LIST_PAGE\" })\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.remove('detail-view-open');\r\n\t\tdivDetailView!.classList.add('detail-view-close');\r\n\r\n\t\t//document.body.classList.remove('hide-scroll-bar');\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div id=\"divDetailView\" className=\"detail-view\">\r\n\t\t\t{/* <div onClick={complete}>{todo.name}</div> */}\r\n\t\t\t<button style={{position: 'absolute', right:'10px'}} onClick={close}>X</button>\r\n\t\t\t{/* <div style={{width: '100%', border: '1px solid silver', borderRadius: '5px', padding: '0px'}}> */}\r\n\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Add and Assign new Answer</h4>\r\n\t\t\t\t<AnswerForm\r\n\t\t\t\t\tanswer={{\r\n\t\t\t\t\t\tanswerId: -1, \r\n\t\t\t\t\t\ttext: 'argh',\r\n\t\t\t\t\t\tcreatedBy: 0,\r\n\t\t\t\t\t\tcreated: new Date()\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tformMode='add'\r\n\t\t\t\t\tcancel={()  => {}}\r\n\t\t\t\t\tsaveForm={(answer: IAnswer) => { \r\n\t\t\t\t\t\taddAndAssignNewAnswer(groupId, questionId, answer, 'add');\r\n\t\t\t\t\t\tclose();\r\n\t\t\t\t\t}} \r\n\t\t\t\t\tuserOptions={props.userOptions}\r\n\t\t\t\t/>\r\n\t\t\t</div>\t\t\t\t\r\n\t\t</div>\r\n\t)\r\n}","export const sourceOptions = [\r\n    { label: \"Unknown\", value: 0 },\r\n    { label: \"Gmail\", value: 1 },\r\n    { label: \"Outlook\", value: 2 },\r\n    { label: \"Phone\", value: 3 },\r\n    { label: \"Chat\", value: 4 },\r\n    { label: \"Slack\", value: 5 }\r\n]","export const statusOptions = [\r\n    { label: \"Unknown\", value: 0 },\r\n    { label: \"In progress\", value: 1 },\r\n    { label: \"Can't reproduce\", value: 2 },\r\n    { label: \"Blocked\", value: 3 },\r\n    { label: \"Complete\", value: 4 }\r\n]","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { QuestionForm } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\nimport { DetailView } from './DetailView';\r\n\r\nimport { sourceOptions } from './../../issueSource/sourceOptions'\r\nimport { statusOptions } from './../../issueStatus/statusOptions'\r\nimport { COLORS } from '../../formik/theme';\r\nconst color = 'blue';\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, \r\n\t\t\tformMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\taddGroup, toggleGroup, editGroup, removeGroup, storeGroup,\r\n\t\t\tselectQuestionAnswer, copyQuestionAnswer, removeQuestionAnswer,\r\n\t\t\tassignQuestionAnswer,\r\n\t\t\tsetIsDetail, isDetail, addAndAssignNewAnswer,\r\n\t\t\tuserOptions,\r\n\t\t\tgroupOptions } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t {\r\n\t\t\tinputEl.current!.select();\r\n\t\t\tinputEl.current!.focus()\r\n\t\t}\r\n\t}, 100)\r\n\r\n\t// const expandGroup = (groupId: number): void => {\r\n\t// \tconst div = document.querySelector<HTMLDivElement>(\"#divGroup\" + groupId);\r\n\t// \tconsole.log(div)\r\n\t// \tdiv!.style.display = 'block';\r\n\t// }\r\n\r\n\treturn (\r\n\t   <>\r\n\t\t\t<div className=\"name-container\">\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<AutoSuggest \r\n\t\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<hr />\r\n\r\n\t\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<h3>All Questions by Groups</h3>\r\n\t\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\t\tconst {groupId, title, isExpanded, questions} = questionGroup;\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing === groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttoggleGroup={toggleGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t{ isExpanded &&\r\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"group-questions\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t{questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={question.questionId}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId, '')}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\t\tAdd a new Group\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Question</h4>\r\n\t\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tselectQuestionAnswer={selectQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tcopyQuestionAnswer={copyQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t\tsourceOptions={sourceOptions}\r\n\t\t\t\t\t\t\t\t\t\tstatusOptions={statusOptions}\r\n\t\t\t\t\t\t\t\t\t\tgroupOptions={groupOptions}\t\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<QuestionForm \r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tselectQuestionAnswer={selectQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tcopyQuestionAnswer={copyQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t\tsourceOptions={sourceOptions}\r\n\t\t\t\t\t\t\t\t\t\tstatusOptions={statusOptions}\r\n\t\t\t\t\t\t\t\t\t\tgroupOptions={groupOptions}\t\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<DetailView \r\n\t\t\t\tgroupId={question ? question!.groupId : 0}\r\n\t\t\t\tquestionId= {question ? question!.questionId : 0}\r\n\t\t\t\taddAndAssignNewAnswer={addAndAssignNewAnswer}\r\n\t\t\t\tuserOptions={userOptions}\r\n\t\t\t/>\t{/* visible={isDetail} */}\r\n\t  </>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IQuestion, IComponentProps, initialQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { QuestionForm } from './Form'\r\n\r\nimport { sourceOptions } from '../../issueSource/sourceOptions'\r\nimport { statusOptions } from '../../issueStatus/statusOptions'\r\nimport { COLORS } from '../../formik/theme';\r\nimport { copyQuestionAnswer, selectQuestionAnswer, storeQuestion } from '../actions';\r\nimport { faPlus, faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst color = 'blue';\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n  \r\nconst SupportPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, onSelectQuestion, cancel, saveForm, add, canEdit,\r\n\t\tremoveQuestionAnswer, assignQuestionAnswer, setIsDetail, \r\n\t\tuserOptions,\r\n\t\tgroupOptions\r\n\t} = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<div style={{display: 'flex'}}>\r\n\t\t\t\t\t{/* Support Page tekst: {tekst} */}\r\n\t\t\t\t\t<AutoSuggest\r\n\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\tonSelectQuestion={onSelectQuestion} \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\t\ttitle=\"Create a new Question\"\r\n\t\t\t\t\t\tonClick={() => { add(0, tekst);\t}\r\n\t\t\t\t\t}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faPlus} color='lightblue' />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Question</h4>\r\n\t\t\t\t\t\t\t<QuestionForm \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\tselectQuestionAnswer={selectQuestionAnswer}\r\n\t\t\t\t\t\t\t\tcopyQuestionAnswer={copyQuestionAnswer}\r\n\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\tsourceOptions={sourceOptions}\r\n\t\t\t\t\t\t\t\tstatusOptions={statusOptions}\r\n\t\t\t\t\t\t\t\tgroupOptions={groupOptions}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default SupportPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionAnswer, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup,\r\n\tremoveQuestionAnswer,\r\n\tassignQuestionAnswer,\r\n\tsetIsDetail,\r\n\taddAndAssignNewAnswer,\r\n\tselectQuestionAnswer,\r\n\tcopyQuestionAnswer,\r\n\ttoggleGroup\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport SupportPage from '../components/SuportPage'\r\n\r\nconst joinQuestionAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IQuestionAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconsole.log({question, answers})\r\n\tconst questionAnswers = question.answers.map(qa => ({...qa, text: answers.find(a => a.answerId === qa.answerId)!.text}));\r\n\treturn questionAnswers.sort((a,b) => a.assigned < b.assigned ? 1 : -1);\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\tconst {questionsState, answerState, userState} = store;\r\n\tconst { questionGroups, question, groupOptions, formMode, groupIdEditing, isDetail } = questionsState; \r\n\tconst { answers } = answerState;\r\n\treturn {\r\n\t\tquestionGroups,\r\n\t\tgroupOptions,\r\n\t\tquestion: question!,\r\n\t\tquestionAnswers: joinQuestionAnswers(question, answers),\r\n\t\tanswers,\r\n\t\tformMode,\r\n\t\tgroupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t\tisDetail,\r\n\t\tuserOptions: userState.users.map(user => ({ label: user.name, value: user.userId }))\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number, text: string, canEdit?: boolean) => dispatch<any>(addQuestion(questionGroupId, text, canEdit)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\ttoggleGroup: (groupId: number) =>  dispatch<any>(toggleGroup(groupId)),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group)),\r\n\r\n\t\t// question answers\r\n\t\tselectQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(selectQuestionAnswer(groupId, questionId, answerId)),\r\n\t\tcopyQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(copyQuestionAnswer(groupId, questionId, answerId)),\r\n\t\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(removeQuestionAnswer(groupId, questionId, answerId)),\r\n\r\n\t\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId)),\r\n\t\t\r\n\t\tsetIsDetail: (isDetail: boolean) => {\r\n\t\t\tdispatch<any>(setIsDetail(isDetail))\r\n\t\t},\r\n\r\n\t\taddAndAssignNewAnswer: (groupId: number, questionId: number, answer: IAnswer, formMode: string) => {\r\n\t\t\tdispatch<any>(addAndAssignNewAnswer(groupId, questionId, answer, formMode))\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(SupportPage)\r\n};","import * as React from 'react';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nsetTimeout(() => {\n  const div = document.querySelector('#divKnowledge');\n  if (div)\n    div!.setAttribute('style', 'display:none')\n}, 10000)\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center', marginBlockStart: '0.66rem', marginBlockEnd: '0.1rem' }}>Questions &amp; Answers</h2>\n      <div id='divKnowledge' className='knowledge'>\n        <h5 style={{textAlign: 'center', color: 'blue'}}>A knowledge base is a great tool for sharing information. \n          When you record your experiences and insights regularly, other members of your team share info.\n        </h5>\n      </div>\n      <containers.promoter canEdit={true} />\n    </>\n  );\n};\n\nexport default App;","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\nimport { IQuestionAnswer } from '../../Questions/types';\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer,\r\n\tusedAnswers: IQuestionAnswer[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nexport const ListRow: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answer, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<tr key={answer.answerId} >\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.answerId}\r\n\t\t\t</td>\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.text}\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\ttitle=\"Add a new Answer\"\r\n\t\t\t\t\tonClick={() => edit(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button \r\n\t\t\t\t\tdisabled={usedAnswers.map(a=>a.answerId).includes(answer.answerId)}\r\n\t\t\t\t\tclassName=\"button-remove\"\r\n\t\t\t\t\ttitle=\"Remove Answer\"\r\n\t\t\t\t\tonClick={() => remove(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t);\r\n  }\r\n\r\n","import * as React from 'react';\r\nimport { IQuestionAnswer } from '../../Questions/types';\r\n\r\nimport { IAnswer } from '../types';\r\nimport { ListRow } from './ListRow';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tusedAnswers: IQuestionAnswer[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nconst List: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answers, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<table width=\"100%\">\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t<ListRow\r\n\t\t\t\t\t\tkey={answer.answerId}\r\n\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\tusedAnswers={usedAnswers}\r\n\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t);\r\n  }\r\n\r\nexport default List\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\nimport { ListRow } from './ListRow';\r\nimport List from './List';\r\nimport { IOption } from '../../common/Select'\r\nimport { COLORS } from '../../formik/theme';\r\nimport { IQuestionAnswer } from '../../Questions/types';\r\nconst color = 'blue';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer,\r\n\tusedAnswers: IQuestionAnswer[],\r\n\tuserOptions: IOption<number>[];\r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\ntype MyParams = {\r\n\tslug: string;\r\n  };\r\n\r\nconst Page: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams<MyParams>();\r\n\t// slug = ''\r\n\tconst { answers, answer, usedAnswers, formMode, add, edit, remove, cancel, saveForm, userOptions } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<List answers={answers} usedAnswers={usedAnswers} edit={edit} remove={remove} />\r\n\t\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>New Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm \r\n\t\t\t\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(answer: IAnswer) => saveForm(answer, formMode)} \r\n\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '5px 5px 15px 5px', background: COLORS[color][5]}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0, color: 'white'}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm\r\n\t\t\t\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(answer: IAnswer) => saveForm(answer, formMode)}\r\n\t\t\t\t\t\t\t\t\tuserOptions={userOptions}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Page\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Page from '../components/Page'\r\nimport { IQuestionAnswer, IQuestionGroup } from '../../Questions/types';\r\n\r\nconst getUsedAnswers = (questionGroups: IQuestionGroup[]) : IQuestionAnswer[]=> {\r\n\tlet questionAnswers: IQuestionAnswer[] = [];\r\n\tfor (let group of questionGroups)\r\n\t\tfor (let question of group.questions)\r\n\t\tquestionAnswers = questionAnswers.concat(question.answers)\r\n\treturn questionAnswers;\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\tanswers: store.answerState.answers,\r\n\tanswer: store.answerState.answer!,\r\n\tformMode: store.answerState.formMode,\r\n\tusedAnswers: getUsedAnswers(store.questionsState.questionGroups),\r\n\tuserOptions: store.userState.users.map(user => ({ label: user.name, value: user.userId }))\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","import { css } from 'glamor';\r\nimport { COLORS } from './formik/theme';\r\nconst { base, black, ...cols } = COLORS;\r\n\r\n// Cool example colors.\r\nexport const coolColors = () => {\r\n\tObject.keys(cols).forEach(color => {\r\n\t\tcss.global(\r\n\t\t\t`.formik-example.formik-example--${color} button[type='submit'],\r\n\t\t\t .formik-example.formik-example--${color} button.primary`,\r\n\t\t\t{\r\n\t\t\t\tbackground: COLORS[color][5],\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tcss.global(\r\n\t\t\t`.formik-example.formik-example--${color} button[type='submit']:focus,\r\n\t  \t\t .formik-example.formik-example--${color} button.primary:focus`,\r\n\t\t\t{\r\n\t\t\t\tbackground: COLORS[color][6],\r\n\t\t\t}\r\n\t\t);\r\n\t\tcss.global(\r\n\t\t\t`.formik-example.formik-example--${color} button[type='submit']:active,\r\n\t  \t\t .formik-example.formik-example--${color} button.primary:active`,\r\n\t\t\t{\r\n\t\t\t\tbackground: COLORS[color][7],\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tcss.global(\r\n\t\t\t`.formik-example.formik-example--${color} input:focus, .formik-example.formik-example--${color} select:focus`,\r\n\t\t\t{\r\n\t\t\t\tborderColor: COLORS[color][4],\r\n\t\t\t\tboxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 0 3px ${COLORS[color][1]}`,\r\n\t\t\t\toutline: 'none',\r\n\t\t\t}\r\n\t\t);\r\n\t});\r\n\r\n}\r\n","import React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { Store } from 'redux';\r\n\r\nimport configureStore, { IAppState } from './store/Store';\r\nimport { getAllQuestions } from './Questions/actions';\r\nimport { getAllAnswers } from './Answers/actions';\r\n\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nimport App from './components/App';\r\nimport AnswersPage from './Answers/containers/Page'\r\nimport containers from './Questions/containers/Pages'\r\n\r\nimport './formik/formikStyles.css';\r\nimport { coolColors } from './cool-colors'\r\nimport { getAllUsers } from './user/actions';\r\n\r\ninterface IProps {\r\n\tstore: Store<IAppState>;\r\n}\r\n\r\n// <Router basename={'/'}>\r\nconst Root: React.SFC<IProps> = props => {\r\n\treturn (\r\n\t\t<Provider store={props.store} >\r\n\t\t\t<Router basename={'/'}>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/supporter/promo\">Supporter</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li  className=\"push-right\">\r\n\t\t\t\t\t\t\t<Link to=\"/answers/sima\">Sign In</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\t\t\t\t\t\r\n\t\t\t\t</nav>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t{/* exact */}\r\n\t\t\t\t\t\t<Route exact path=\"/supporter/:tekst?\">\r\n\t\t\t\t\t\t\t{<App />}\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/questions\">\r\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\r\n\t\t\t\t\t\t\t<AnswersPage />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{/* <Route\r\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\r\n\t\t\t\t\t\t\trender={({ match }) => {\r\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\r\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\t\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\ncoolColors();\r\n\r\n// Generate the store\r\n// localStorage.clear(); // !!!!!!!!!!!!\r\n\r\nconst store = configureStore();\r\nstore.dispatch(getAllQuestions());\r\nstore.dispatch(getAllAnswers());\r\nstore.dispatch(getAllUsers())\r\n\r\n// Render the App\r\n// ReactDOM.render(<Root store={store} />, document.getElementById(\r\n//   'root'\r\n// ) as HTMLElement);\r\n\r\n// React.StrictMode\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t  <Root store={store} />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root') \r\n  );"],"sourceRoot":""}