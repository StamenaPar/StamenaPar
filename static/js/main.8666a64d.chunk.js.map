{"version":3,"sources":["Answers/actions.ts","Questions/actions.ts","Questions/reducer.ts","Answers/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/AutoSuggestAnswer.tsx","Questions/components/QuestionAnswers.tsx","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","common/useHover.tsx","Questions/components/QuestionRow.tsx","Questions/components/GroupRow.tsx","formik/theme.js","Answers/components/Form.tsx","Questions/components/DetailView.tsx","Questions/components/QuestionsPage.tsx","Questions/components/PromoterPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","Answers/components/ListRow.tsx","Answers/components/List.tsx","Answers/components/Page.tsx","Answers/containers/Page.tsx","index.tsx"],"names":["AnswerActionTypes","QuestionActionTypes","isWebStorageSupported","window","getAnswersFromLocalStorage","Promise","resolve","reject","setTimeout","storageAnswers","addAnswerToLocalStorage","answer","updateAnswerFromLocalStorage","removeAnswerFromLocalStorage","answerId","SUPPORT_ANSWERS","storageAnswersDemo","text","words","options","reloadQuestionsFromLocalStorage","sQuestions","questionGroups","JSON","parse","storageQuestionsByGroups","getQuestion","questionId","dispatch","a","getQuestionFromLocalStorage","response","type","GET_QUESTION","question","data","results","console","error","delay","undefined","questions","find","getQuestionGroupsFromLocalStorage","updateGroupFromLocalStorage","group","SUPPORT_QUESTIONS","storageQuestionsByGroupsDemo","groupId","title","answers","initialQuestion","initialQuestionGroup","initialQuestionState","loading","formMode","groupIdEditing","isDetail","initialAnswer","initialAnswerState","rootReducer","combineReducers","questionState","state","action","GET_ALL_QUESTIONS","section","split","f","ADD_QUESTION","EDIT_QUESTION","STORE_QUESTION","map","g","q","CANCEL_QUESTION","REMOVE_QUESTION","filter","REMOVE_QUESTION_ANSWER","ASSIGN_QUESTION_ANSWER","SET_IS_DETAIL","ADD_GROUP","EDIT_GROUP","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","STORE_QUESTIONS_TO_LOCAL_STORAGE","localStorage","setItem","stringify","answerState","GET_ALL_ANSWERS","GET_ANSWER","ADD_ANSWER","length","Math","max","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","STORE_ANSWERS_TO_LOCAL_STORAGE","inputAutosuggest","createRef","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","tekst","getSuggestions","highlighted","focus","current","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderInputComponent","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","ref","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","AutoSuggestAnswer","assignQuestionAnswer","setAnswerText","answersUnassigned","QuestionAnswers","questionAnswers","canEdit","removeQuestionAnswer","setIsDetail","includes","setTekst","onClick","stopPropagation","preventDefault","icon","faWindowClose","color","val","divDetailView","document","getElementById","classList","add","style","zIndex","goDetail","faPlus","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","id","name","handleChange","onBlur","handleBlur","disabled","width","touched","errors","multiple","cancel","DisplayForm","edit","remove","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","addEventListener","removeEventListener","QuestionRow","hoverRef","faEdit","GroupRow","questionGroup","editGroup","removeGroup","COLORS","require","palx","fromMode","AnswerForm","height","background","padding","borderRadius","boxShadow","maxWidth","margin","DetailView","contains","left","position","right","border","marginTop","storeNewAnswer","QuestionsPage","useParams","addGroup","storeGroup","inputEl","select","textAlign","paddingBottom","target","defaultValue","marginLeft","PromoterPage","joinAnswers","answerIds","mapStateToProps","store","ownProps","mapDispatchToProps","questionGroupId","groups","questionIdMax","editQuestion","removeQuestion","storeQuestion","err","log","connect","promoter","App","ListRow","usedAnswers","List","Page","slug","getUsedAnswers","concat","editAnswer","removeAnswer","storeAnswer","cols","base","black","Object","keys","forEach","css","global","borderColor","outline","Root","basename","to","exact","path","createStore","applyMiddleware","thunk","loaded","getItem","sAnswers","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.8666a64d.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './types';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n  // localSTorage\r\n  STORE_ANSWERS_TO_LOCAL_STORAGE = 'STORE_ANSWERS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\nexport interface IStoreAnswersToLocalStorage {\r\n\ttype: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIStoreAnswersToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\tif (sAnswers !== null) {\r\n\t\t\t\t// console.log('localStorage:', sAnswers);\r\n\t\t\t\tconst answers: IAnswer[] = JSON.parse(sAnswers);\r\n\t\t\t\tanswers.map(g => storageAnswers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\r\n\t\t}\r\n\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.EDIT_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeAnswerFromLocalStorage(answerId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.REMOVE_ANSWER,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addAnswerToLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateAnswerFromLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\t\t \r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageAnswers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answerId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS' \r\n\r\nconst storageAnswers: IAnswer[] = [\r\n]\r\n\r\nconst storageAnswersDemo: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 115,\r\n\t\ttext: 'Do whatever you want!',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 116,\r\n\t\ttext: 'Jump through the window.',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\r\n];\r\n\r\n\r\n","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup } from './types';\r\nimport { IQuestionState } from './reducer';\r\n\r\nimport { addAnswer, AnswerActionTypes } from '../Answers/actions'\r\nimport { IAnswer, IAnswerState } from '../Answers/types';\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\r\n\t// question answers\r\n\tREMOVE_QUESTION_ANSWER = 'REMOVE_QUESTION_ANSWER',\r\n\tASSIGN_QUESTION_ANSWER = 'ASSIGN_QUESTION_ANSWER',\r\n\t// localSTorage\r\n\tSTORE_QUESTIONS_TO_LOCAL_STORAGE = 'STORE_QUESTIONS_TO_LOCAL_STORAGE',\r\n\tSET_IS_DETAIL = 'SET_IS_DETAIL'\r\n}\r\n\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tquestion: IQuestion\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroup: IQuestionGroup\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\nexport interface IStoreQuestionsToLocalStorage {\r\n\ttype: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// question answers\r\nexport interface IRemoveQuestionAnswer {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\nexport interface IAssignQuestionAnswer {\r\n\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number,\r\n\ttekst?: string\r\n}\r\n\r\nexport interface ISetIsDetail {\r\n\ttype: QuestionActionTypes.SET_IS_DETAIL;\r\n\tisDetail: boolean\r\n}\r\n\r\nexport interface IStoreNewAnswer {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIAddGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\t\t\t\t\tIRemoveQuestionAnswer | IAssignQuestionAnswer |\r\n\t\t\t\t\tIStoreQuestionsToLocalStorage | ISetIsDetail | IStoreNewAnswer;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\nexport const storeNewAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n\tconsole.log('storeNewAnswer answer:', answer)\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.ADD_ANSWER\r\n\t\t\t});\t\t\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t }\r\n\t\t//if (isWebStorageSupported())\r\n\t\t// \tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\t\t \r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tlet loaded = false;\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\tif (sQuestions !== null) {\r\n\t\t\t\t// console.log('localStorage:', sQuestions);\r\n\t\t\t\t// const questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\t\t\t\tstorageQuestionsByGroups = JSON.parse(sQuestions)\r\n\t\t\t\tloaded = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!loaded)\r\n\t\t\tstorageQuestionsByGroups = storageQuestionsByGroupsDemo\r\n\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: JSON.parse(JSON.stringify(response.data.results)),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const reloadQuestionsFromLocalStorage = (sQuestions: string) => {\r\n\tconst questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\tstorageQuestionsByGroups = questionGroups;\r\n}\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGet>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAdd>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet questionIdMax = 0;\r\n\t\tfor (let g of groups) {\r\n\t\t\tlet max = Math.max(...g.questions.map(q => q.questionId))\r\n\t\t\tif (max > questionIdMax)\r\n\t\t\t\tquestionIdMax = max;\r\n\t\t}\r\n\r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_QUESTION,\r\n\t\t  groupId: groupId, \r\n        questionId: questionIdMax + 1\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId); \r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_QUESTION,\r\n        question: response.data.results // answers.find(a => a.questionId === questionId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_QUESTION,\r\n        groupId: groupId,\r\n        questionId: questionId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestionAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t  groupId: groupId,\r\n        questionId: questionId,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const assignQuestionAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number, tekst?: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay();\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      \tdispatch({\r\n\t\t\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER,\r\n\t\t\tgroupId,\r\n        \tquestionId,\r\n        \tanswerId\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const setIsDetail: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, ISetIsDetail>\r\n> = (isDetail: boolean) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n      \tdispatch({\r\n\t\t\ttype: QuestionActionTypes.SET_IS_DETAIL,\r\n\t\t\tisDetail\r\n\t\t});\r\n\t} \r\n\tcatch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion: question,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of storageQuestionsByGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 100)\r\n  \t })\r\n  }  \r\n\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAddGroup>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet max = Math.max(...groups.map(g => g.groupId))\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_GROUP,\r\n\t\t  groupId: max + 1, \r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tconst group = groups.find(g => g.groupId === groupId)\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_GROUP,\r\n        group: JSON.parse(JSON.stringify(group))\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after update, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_GROUP,\r\n        groupId: groupId\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait updateGroupFromLocalStorage(group); \r\n\t\tdispatch({\r\n\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\tgroup\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageQuestionsByGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n\t})\r\n}\r\n\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS' \r\n\r\n \r\n// localStorage.removeItem(SUPPORT_QUESTIONS);\r\n  \r\nexport let storageQuestionsByGroups: IQuestionGroup[] = [\r\n]\r\n\r\nexport const storageQuestionsByGroupsDemo: IQuestionGroup[] = [\r\n\r\n\t{\r\n\t\tgroupId: 11,\r\n\t\ttitle: 'General settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 11,\r\n\t\t\t\tquestionId: 101,\r\n\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t}\r\n\t\t]\r\n\t}, \r\n\r\n\t{\r\n\t\tgroupId: 22,\r\n\t\ttitle: 'Taxes',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 22,\r\n\t\t\t\tquestionId: 201,\r\n\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: []\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 22,\r\n\t\t\t\tquestionId: 202,\r\n\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\r\n\t{\r\n\t\tgroupId: 33,\r\n\t\ttitle: 'Client settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 301,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 302,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 303,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 304,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n  SUPPORT_QUESTIONS,\r\n  reloadQuestionsFromLocalStorage\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup } from './types'\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tanswers: []\r\n };\r\n\r\n export const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: []\r\n };\r\n\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  formMode: string;\r\n  groupIdEditing: number;\r\n  isDetail: boolean\r\n}\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: 0,\r\n\tisDetail: false\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId: action.questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question: {...action.question}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  question: undefined,\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\t\t// Question answers\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION_ANSWER: {\r\n\t\t\t return {\r\n\t\t\t   ...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t\t{ ...q, answers: [...q.answers] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...q, answers: q.answers.filter(answerId => answerId !== action.answerId) }\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}   \r\n\r\n\t\tcase QuestionActionTypes.ASSIGN_QUESTION_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t  { ...g, questions: [...g.questions] } \r\n\t\t\t\t  : \r\n\t\t\t\t  { ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t  { ...q, answers: [...q.answers] } \r\n\t\t\t\t\t  : \r\n\t\t\t\t\t  { ...q, answers: [...q.answers, action.answerId] }\r\n\t\t\t\t  )\r\n\t\t\t  \t})\r\n\t\t  \t}\r\n\t  \t}   \r\n\r\n\t\tcase QuestionActionTypes.SET_IS_DETAIL: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t  \t\tisDetail: action.isDetail\r\n\t\t\t}\r\n  \t\t}   \r\n\r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: action.groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId: action.groupId }]\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  groupIdEditing: action.group.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: 0,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ? \r\n\t\t\t\t\tg \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}    \r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions]})\r\n\t\t\t\t\treturn acc\r\n\t\t\t  \t}, [])\r\n\t\t\t};\r\n\t\t}   \t\t\r\n\t\t\t \r\n\t\tcase QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE: {\r\n\t\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(state.questionGroups));\r\n\t\t\treloadQuestionsFromLocalStorage(JSON.stringify(state.questionGroups));\r\n\t\t\treturn state;\r\n\t\t}   \t\t\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n  SUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport {IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\toptions: []\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n\t\treturn {\r\n        ...state,\r\n        answers: action.answers.map(answer => { return {...answer, words: answer.text.split(' ')} }),\r\n      };\r\n\t} \r\n \tcase AnswerActionTypes.GET_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n\t\t  \t...state,\r\n\t\t  \tformMode: 'add',\r\n        \tanswer: { \r\n\t\t\t  ...initialAnswer, \r\n\t\t\t  answerId: state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1,\r\n\t\t\t}\r\n      };\r\n\t}    \t\r\n    case AnswerActionTypes.EDIT_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answer: { ...action.answer, words: action.answer.text.split(' ')}\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\tlet answers = [];\r\n\t\tif (state.formMode === 'add') {\r\n\t\t\tif (action.answer.answerId === -1)\r\n\t\t\t\taction.answer.answerId = state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1;\r\n\t\t\tanswers = [...state.answers, { ...action.answer, words:  action.answer.text.split(' ')}]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanswers = state.answers.map(a => a.answerId === action.answer.answerId ? { ...action.answer, words:  action.answer.text.split(' ')} : a)\r\n\t\t}\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answers: answers\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n      return {\r\n        ...state,\r\n\t\t  formMode: 'display',\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'display',\r\n\t\t  answers: state.answers.filter(a => a.answerId !== action.answerId)\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\treturn state;\r\n\t}   \t\r\n\r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../Questions/reducer';\r\n\r\nimport {\tanswerReducer } from '../Answers/reducer';\r\nimport {\tIAnswerState } from '../Answers/types';\r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\nimport { createRef, RefObject } from 'react'\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\nlet inputAutosuggest = createRef<HTMLInputElement>();\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], tekst: string, onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t//inputAutosuggest: React.RefObject<HTMLInputElement>;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvalue: props.tekst || '',\r\n\t\t\tsuggestions: this.getSuggestions(''),\r\n\t\t\thighlighted: ''\r\n\t\t};\r\n\t\t//this.inputAutosuggest = createRef<HTMLInputElement>();\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tsetTimeout(() => {\r\n\t\t\t//inputAutosuggest!.current!.focus();\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\twindow.focus()\r\n\t\t\t\tinputAutosuggest!.current!.focus();\r\n\t\t\t}, 500)\r\n\r\n\t}, 100)\r\n\r\n\t\t// console.log('componentDidMount', document)\r\n\t\t// console.log(document?.getElementById('inputAutoSuggest'))\r\n\t\t//document?.getElementById('inputAutoSuggest')?.focus(); \r\n\t}\r\n\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent)\r\n\t\t\t  }}\r\n\r\n\t\t\t  />;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.RenderInputComponentProps): JSX.Element {\r\n\t\tconst { ref, ...restInputProps } = inputProps;\r\n\t\t// if (ref !== undefined)\r\n\t\t// \tthis.inputAutosuggest = ref as React.RefObject<HTMLInputElement>;\r\n\t\treturn (\r\n\t\t\t <div>\r\n\t\t\t\t   <input {...restInputProps} ref={inputAutosuggest}/>\r\n\t\t\t </div>\r\n\t\t);\r\n   }\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\t\r\n\tprotected onChange(event: /*React.ChangeEvent<HTMLInputElement>*/ React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\tthis.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\nimport { IAnswer }  from '../Answers/types'\r\nimport './AutoSuggest.css'\r\nimport { IQuestion } from '../Questions/types';\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IAnswer> };\r\n\r\ninterface IProps {\r\n\tanswersUnassigned: IAnswer[], \r\n\tquestion: IQuestion,\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void\r\n\tsetAnswerText?: (val: string) => void\r\n}\r\n\r\nexport class AutoSuggestAnswer extends React.Component<IProps, any> {\r\n\r\n\tstate: any;\r\n\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={false}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'contact'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IAnswer>): void {\r\n\t\t const answer: IAnswer = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.answerId} (${question.text}).`);\r\n\t\t this.props.assignQuestionAnswer(\r\n\t\t\t this.props.question.groupId,\r\n\t\t\t this.props.question.questionId, \r\n\t\t\t answer.answerId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IAnswer, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IAnswer>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\tif (this.props.setAnswerText) {\r\n\t\t\tthis.props.setAnswerText(newValue);\r\n\t\t}\r\n\t\tthis.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IAnswer[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\treturn this.props.answersUnassigned.filter(answer => this.anyWord(valueWordRegex, answer.words!))\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IAnswer) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AutoSuggestAnswer } from '../../components/AutoSuggestAnswer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tanswers?: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string,\r\n\tremoveQuestionAnswer?: (groupId: number, questionId: number, answerId: number) => void,\r\n\tassignQuestionAnswer?: (groupId: number, questionId: number, answerId: number, tekst?: string) => void,\r\n\tsetAnswerText?: (val: string) => void,\r\n\tsetIsDetail: (isDetail: boolean) => void\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n\tconst { \r\n\t\tquestion, \r\n\t\tquestionAnswers, \r\n\t\tanswers, \r\n\t\tcanEdit, \r\n\t\tformMode, \r\n\t\tremoveQuestionAnswer, assignQuestionAnswer, setIsDetail \r\n\t} = props; \r\n\tconst answersUnassigned = answers?.filter(a => !question.answers.includes(a.answerId))\r\n\r\n\tconst [tekst, setTekst] = React.useState('');\r\n\tconst setAnswerText = (val: string) => {\r\n\t\tsetTekst(val);\r\n\t}\r\n\r\n\tconst assignQuestionAnswerTekst = () => {\r\n\t\tif (assignQuestionAnswer) {\r\n\t\t\t//storeAnswer({ answerId: -1, text: tekst }, 'add')\r\n\t\t\tassignQuestionAnswer(\r\n\t\t\t\tquestion.groupId,\r\n\t\t\t\tquestion.questionId, \r\n\t\t\t\t-1,\r\n\t\t\t\ttekst\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tconst goDetail = (isDetail: boolean) => {\r\n\t\tsetIsDetail(isDetail);\r\n\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.add('detail-view-open');\r\n\t\tdivDetailView!.style.zIndex = '3';\r\n\t\t//document.body.classList.add('hide-scroll-bar');\r\n  \t}\t\r\n\r\n\r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{/* { questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t} */}\r\n\t\t\t{ questionAnswers.length > -1 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>{ questionAnswers.length === 0 ? 'No answers yet' : 'Answers'}</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => { \r\n\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer!(question.groupId, question.questionId, answer.answerId)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{canEdit && formMode !== 'display' && <tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<AutoSuggestAnswer\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tanswersUnassigned={answersUnassigned!}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer!}\r\n\t\t\t\t\t\t\t\t\tsetAnswerText={setAnswerText}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => goDetail(true)}>\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faPlus} color='lightblue' />\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tanswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tcancel: () => void;\r\n\tsaveForm: (question: IQuestion, formMode: string) => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n  setIsDetail: (isDetail: boolean) => void;\r\n }\r\n\r\nexport const Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n  \r\n  return (\r\n\t  <>\r\n   \t<form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  multiple\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit && \r\n\t\t\t<button onClick={() => props.cancel()}>Cancel</button>}\r\n\t\t{ props.canEdit && \r\n      \t<button type=\"submit\">Save</button>}\r\n    </form>\r\n\r\n\t\t<br />\r\n\t\t<QuestionAnswers \r\n\t\t\tquestion={props.question} \r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tanswers={props.answers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n\t\t\tremoveQuestionAnswer={props.removeQuestionAnswer}\r\n\t\t\tassignQuestionAnswer={props.assignQuestionAnswer}\r\n      setIsDetail={props.setIsDetail} \r\n\t\t/>\t \r\n\t\t</>\r\n  );\r\n};","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tanswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tedit: () => void;\r\n\tremove: () => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void; \r\n  setIsDetail: (isDetail: boolean) => void;\r\n }\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers\r\n\t\t\tquestion={props.question}\r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n      setIsDetail={props.setIsDetail}\r\n\t\t/>\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.edit()}>Edit</button>\r\n\t\t\t<button onClick={() => props.remove()}>Remove</button>\r\n\t\t\t</>\r\n\t\t}\r\n    </form>\r\n  );\r\n};","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n \r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\tconst { groupId, questionId } = question;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && \r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit\" onClick={() => edit(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove\" onClick={() => remove(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, editGroup, removeGroup } = props;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} key={questionGroup.groupId} className=\"name\" >\r\n\t\t\t<span className='question-group-title'>{questionGroup.title}</span>\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\t\t\t\r\n\t\t\t{hoverProps.isHovered && questionGroup.questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","const palx = require('palx');\r\nexport const BASE_COLOR = '#666ee8';\r\nexport const COLORS = palx(BASE_COLOR);","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\nimport { COLORS } from '../../formik/theme';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n }\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n      \tanswerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n   },\r\n   validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\t\tid=\"answerId\"\r\n\t\t\t\tname=\"answerId\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={formik.handleChange}\r\n\t\t\t\tonBlur={formik.handleBlur}\r\n\t\t\t\tvalue={formik.values.answerId}\r\n\t\t\t\tdisabled\r\n\t\t\t\tstyle={{width: '50px'}}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n    \t<button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst color = 'blue';\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n\treturn (\r\n\t\t<div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\theight: '100%',\r\n\t\t\tbackground: COLORS[color][5],\r\n\t\t\tpadding: '4rem 2rem',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tborderRadius: '4px',\r\n\t\t\t\tboxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n\t\t\t\tbackground: '#fff',\r\n\t\t\t\tmaxWidth: 400,\r\n\t\t\t\tmargin: '0 auto',\r\n\t\t\t\tpadding: '2rem',\r\n\t\t\t}}\r\n\t\t\t>\r\n\t\t\t<div className=\"formik-example formik-example--blue\">\r\n\t\t\t\t<Form {...props} />\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</div>\t\r\n\t)\r\n}","import React, { useState, useEffect } from 'react'\r\n\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AnswerForm } from '../../Answers/components/Form'\r\n\r\ninterface IProps {\r\n\tstoreNewAnswer: (answer: IAnswer, formMode: string) => void\r\n}\r\n\r\n//export default function DetailView() {\r\nexport const DetailView: React.FC<IProps> = (props: IProps) => {\r\n\r\n\t// const complete = ({name}) => dispatch({ type: 'TOGGLE', name: 'new Todo' })\r\n\r\n\tuseEffect(()=> {\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.addEventListener('animationend', () => {\r\n\t\t\tif (divDetailView!.classList.contains('detail-view-close')) {\r\n\t\t\t\tdivDetailView!.style.zIndex = '0';\r\n\t\t\t\tdivDetailView!.style.left = '100%';\r\n\t\t\t\tdivDetailView!.classList.remove('detail-view-close');\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdivDetailView!.style.left = '60%';\r\n\t\t\t}\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst close = () => {\r\n\t\t// dispatch({ type: 'GO_BACK', page: \"LIST_PAGE\" })\r\n\t\tconst divDetailView = document.getElementById('divDetailView');\r\n\t\tdivDetailView!.classList.remove('detail-view-open');\r\n\t\tdivDetailView!.classList.add('detail-view-close');\r\n\r\n\t\t//document.body.classList.remove('hide-scroll-bar');\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id=\"divDetailView\" className=\"detail-view\">\r\n\t\t\t{/* <div onClick={complete}>{todo.name}</div> */}\r\n\t\t\t<button style={{position: 'absolute', right:'10px'}} onClick={close}>X</button>\r\n\t\t\t<h2>New Answer</h2>\r\n\t\t\t<div style={{width: '100%', border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t<AnswerForm\r\n\t\t\t\t\tanswer={{\r\n\t\t\t\t\t\tanswerId: -1, \r\n\t\t\t\t\t\ttext: 'argh'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tformMode='add'\r\n\t\t\t\t\tcancel={()  => {}}\r\n\t\t\t\t\tsaveForm={(answer: IAnswer) => props.storeNewAnswer(answer, 'add')} \r\n\t\t\t\t/>\r\n\t\t\t</div>\t\t\t\t\r\n\t\t</div>\r\n\t)\r\n}","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\nimport { DetailView } from './DetailView';\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\t\taddGroup, editGroup, removeGroup, storeGroup,\r\n\t\t\t\tremoveQuestionAnswer, assignQuestionAnswer,\r\n\t\t\t\tsetIsDetail, isDetail, storeNewAnswer } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t {\r\n\t\t\tinputEl.current!.select();\r\n\t\t\tinputEl.current!.focus()\r\n\t\t}\r\n\t}, 100)\r\n\r\n\r\n    return (\r\n\t   <>\r\n\t\t\t<div className=\"name-container\">\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<AutoSuggest \r\n\t\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<hr />\r\n\r\n\t\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing === questionGroup.groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={questionGroup.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== questionGroup.groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '10px'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={question.questionId}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\t\tAdd a new Section\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<DetailView storeNewAnswer={storeNewAnswer} />\t{/* visible={isDetail} */}\r\n\t  </>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IQuestion, IComponentProps } from '../types';\r\n\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n  \r\nconst PromoterPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, onSelectQuestion, cancel, saveForm, canEdit,\r\n\t\tremoveQuestionAnswer, assignQuestionAnswer, setIsDetail, storeNewAnswer } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t{/* Support Page tekst: {tekst} */}\r\n\t\t\t\t\t<AutoSuggest\r\n\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\tonSelectQuestion={onSelectQuestion} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\tsetIsDetail={setIsDetail}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default PromoterPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup,\r\n\tremoveQuestionAnswer,\r\n\tassignQuestionAnswer,\r\n\tsetIsDetail,\r\n\tstoreNewAnswer\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport PromoterPage from '../components/PromoterPage'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionState.questionGroups,\r\n\t\tquestion: store.questionState.question!,\r\n\t\tquestionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionState.formMode,\r\n\t\tgroupIdEditing: store.questionState.groupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t\tisDetail: store.questionState.isDetail\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group)),\r\n\r\n\t\t// question answers\r\n\t\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(removeQuestionAnswer(groupId, questionId, answerId)),\r\n\r\n\t\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId)),\r\n\t\t\r\n\t\tsetIsDetail: (isDetail: boolean) => {\r\n\t\t\tdispatch<any>(setIsDetail(isDetail))\r\n\t\t},\r\n\r\n\t\tstoreNewAnswer: (answer: IAnswer, formMode: string) => {\r\n\t\t\tdispatch<any>(storeNewAnswer(answer, formMode))\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(PromoterPage)\r\n};","import * as React from 'react';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer,\r\n\tusedAnswers: number[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nexport const ListRow: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answer, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<tr key={answer.answerId} >\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.answerId}\r\n\t\t\t</td>\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.text}\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\ttitle=\"Add a new Answer\"\r\n\t\t\t\t\tonClick={() => edit(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button \r\n\t\t\t\t\tdisabled={usedAnswers.includes(answer.answerId)}\r\n\t\t\t\t\tclassName=\"button-remove\"\r\n\t\t\t\t\ttitle=\"Remove Answer\"\r\n\t\t\t\t\tonClick={() => remove(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t);\r\n  }\r\n\r\n","import * as React from 'react';\r\n\r\nimport { IAnswer } from '../types';\r\nimport { ListRow } from './ListRow';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tusedAnswers: number[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nconst List: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answers, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<table>\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t<ListRow\r\n\t\t\t\t\t\tkey={answer.answerId}\r\n\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\tusedAnswers={usedAnswers}\r\n\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t);\r\n  }\r\n\r\nexport default List\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\nimport { ListRow } from './ListRow';\r\nimport List from './List';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer,\r\n\tusedAnswers: number[],\r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\ntype MyParams = {\r\n\tslug: string;\r\n  };\r\n\r\nconst Page: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams<MyParams>();\r\n\t// slug = ''\r\n\tconst { answers, answer, usedAnswers, formMode, add, edit, remove, cancel, saveForm } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<List answers={answers} usedAnswers={usedAnswers} edit={edit} remove={remove} />\r\n\t\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Page\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Page from '../components/Page'\r\nimport { IQuestionGroup } from '../../Questions/types';\r\n\r\nconst getUsedAnswers = (questionGroups: IQuestionGroup[]) : number[]=> {\r\n\tlet answerIds: number[] = [];\r\n\tfor (let group of questionGroups)\r\n\t\tfor (let question of group.questions)\r\n\t\t\tanswerIds = answerIds.concat(question.answers)\r\n\treturn answerIds;\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\tanswers: store.answerState.answers,\r\n\tanswer: store.answerState.answer!,\r\n\tformMode: store.answerState.formMode,\r\n\tusedAnswers: getUsedAnswers(store.questionState.questionGroups)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { Store } from 'redux';\r\n\r\nimport configureStore, { IAppState } from './store/Store';\r\nimport { getAllQuestions } from './Questions/actions';\r\nimport { getAllAnswers } from './Answers/actions';\r\n\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nimport App from './components/App';\r\nimport AnswersPage from './Answers/containers/Page'\r\nimport containers from './Questions/containers/Pages'\r\n\r\nimport './formik/formikStyles.css';\r\nimport { css } from 'glamor';\r\nimport { COLORS } from './formik/theme';\r\nconst { base, black, ...cols } = COLORS;\r\n\r\nfunction getQueryStringParams(paramName: string) : string {\r\n\tlet searchParams = new URLSearchParams(window.location.search.substring(1));\r\n\tsearchParams.forEach(p => console.log(p))\r\n\tconst s =  searchParams.get(paramName) || '';\r\n\treturn s;\r\n}\r\n\r\n//const tekst = getQueryStringParams('tekst');\r\n\r\n// Cool example colors.\r\nObject.keys(cols).forEach(color => {\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit'],\r\n\t.formik-example.formik-example--${color} button.primary`,\r\n\t  {\r\n\t\t background: COLORS[color][5],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:focus,\r\n\t  .formik-example.formik-example--${color} button.primary:focus`,\r\n\t  {\r\n\t\t background: COLORS[color][6],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:active,\r\n\t  .formik-example.formik-example--${color} button.primary:active`,\r\n\t  {\r\n\t\t background: COLORS[color][7],\r\n\t  }\r\n\t);\r\n \r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} input:focus, .formik-example.formik-example--${color} select:focus`,\r\n\t  {\r\n\t\t borderColor: COLORS[color][4],\r\n\t\t boxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 0 3px ${COLORS[color][1]}`,\r\n\t\t outline: 'none',\r\n\t  }\r\n\t);\r\n });\r\n\r\n\r\ninterface IProps {\r\n\tstore: Store<IAppState>;\r\n}\r\n\r\n// <Router basename={'/'}>\r\nconst Root: React.SFC<IProps> = props => {\r\n\treturn (\r\n\t\t<Provider store={props.store} >\r\n\t\t\t<Router basename={'/'}>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/supporter/promo\">Supporter</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li  className=\"push-right\">\r\n\t\t\t\t\t\t\t<Link to=\"/answers/sima\">Sign In</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\t\t\t\t\t\r\n\t\t\t\t</nav>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t{/* exact */}\r\n\t\t\t\t\t\t<Route exact path=\"/supporter/:tekst?\">\r\n\t\t\t\t\t\t\t{<App />}\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/questions\">\r\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\r\n\t\t\t\t\t\t\t<AnswersPage />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{/* <Route\r\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\r\n\t\t\t\t\t\t\trender={({ match }) => {\r\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\r\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\t\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\n// Generate the store\r\nconst store = configureStore();\r\nstore.dispatch(getAllQuestions());\r\nstore.dispatch(getAllAnswers());\r\n\r\n// Render the App\r\n// ReactDOM.render(<Root store={store} />, document.getElementById(\r\n//   'root'\r\n// ) as HTMLElement);\r\n\r\n// React.StrictMode\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t  <Root store={store} />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root') \r\n  );"],"sourceRoot":""}