{"version":3,"sources":["Questions/actions.ts","Answers/actions.ts","Questions/reducer.ts","Answers/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/AutoSuggestAnswer.tsx","Questions/components/QuestionAnswers.tsx","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","common/useHover.tsx","Questions/components/QuestionRow.tsx","Questions/components/GroupRow.tsx","Questions/components/QuestionsPage.tsx","Questions/components/PromoterPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","formik/theme.js","Answers/components/Form.tsx","Answers/components/ListRow.tsx","Answers/components/List.tsx","Answers/components/Page.tsx","Answers/containers/Page.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","isWebStorageSupported","window","reloadQuestionsFromLocalStorage","sQuestions","questionGroups","JSON","parse","storageQuestionsByGroups","getQuestion","questionId","dispatch","a","getQuestionFromLocalStorage","response","type","GET_QUESTION","question","data","results","console","error","delay","Promise","resolve","reject","setTimeout","undefined","questions","find","getQuestionGroupsFromLocalStorage","updateGroupFromLocalStorage","group","SUPPORT_QUESTIONS","storageQuestionsByGroupsDemo","groupId","title","text","words","answers","initialQuestion","initialQuestionGroup","initialQuestionState","loading","formMode","groupIdEditing","getAnswersFromLocalStorage","storageAnswers","addAnswerToLocalStorage","answer","updateAnswerFromLocalStorage","removeAnswerFromLocalStorage","answerId","SUPPORT_ANSWERS","storageAnswersDemo","options","initialAnswer","initialAnswerState","rootReducer","combineReducers","questionState","state","action","GET_ALL_QUESTIONS","section","split","f","ADD_QUESTION","EDIT_QUESTION","STORE_QUESTION","map","g","q","CANCEL_QUESTION","REMOVE_QUESTION","filter","REMOVE_QUESTION_ANSWER","ASSIGN_QUESTION_ANSWER","ADD_GROUP","EDIT_GROUP","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","STORE_QUESTIONS_TO_LOCAL_STORAGE","localStorage","setItem","stringify","answerState","GET_ALL_ANSWERS","GET_ANSWER","ADD_ANSWER","length","Math","max","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","STORE_ANSWERS_TO_LOCAL_STORAGE","inputAutosuggest","createRef","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","tekst","getSuggestions","highlighted","log","current","focus","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderInputComponent","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","ref","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","AutoSuggestAnswer","assignQuestionAnswer","onBlur","answersUnassigned","QuestionAnswers","questionAnswers","canEdit","removeQuestionAnswer","includes","onClick","stopPropagation","preventDefault","icon","faWindowClose","color","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","id","name","handleChange","handleBlur","disabled","style","width","touched","errors","multiple","cancel","DisplayForm","edit","remove","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","handleMouseOut","useEffect","node","addEventListener","removeEventListener","QuestionRow","hoverRef","faEdit","GroupRow","questionGroup","editGroup","removeGroup","QuestionsPage","useParams","add","addGroup","storeGroup","inputEl","select","textAlign","paddingBottom","target","defaultValue","marginLeft","border","borderRadius","padding","marginTop","PromoterPage","joinAnswers","answerIds","mapStateToProps","store","ownProps","mapDispatchToProps","questionGroupId","groups","questionIdMax","editQuestion","removeQuestion","storeQuestion","err","connect","promoter","App","COLORS","require","palx","fromMode","AnswerForm","height","background","boxShadow","maxWidth","margin","ListRow","usedAnswers","List","Page","slug","getUsedAnswers","concat","editAnswer","removeAnswer","storeAnswer","cols","base","black","Object","keys","forEach","css","global","borderColor","outline","Root","basename","to","exact","path","createStore","applyMiddleware","thunk","loaded","getItem","sAnswers","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.708d03d0.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup } from './types';\r\nimport { IQuestionState } from './reducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\r\n\t// question answers\r\n\tREMOVE_QUESTION_ANSWER = 'REMOVE_QUESTION_ANSWER',\r\n\tASSIGN_QUESTION_ANSWER = 'ASSIGN_QUESTION_ANSWER',\r\n\t// localSTorage\r\n\tSTORE_QUESTIONS_TO_LOCAL_STORAGE = 'STORE_QUESTIONS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tquestion: IQuestion\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroup: IQuestionGroup\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\nexport interface IStoreQuestionsToLocalStorage {\r\n\ttype: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// question answers\r\nexport interface IRemoveQuestionAnswer {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\nexport interface IAssignQuestionAnswer {\r\n\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIAddGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\t\t\t\t\tIRemoveQuestionAnswer | IAssignQuestionAnswer |\r\n\t\t\t\t\tIStoreQuestionsToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tlet loaded = false;\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\tif (sQuestions !== null) {\r\n\t\t\t\t// console.log('localStorage:', sQuestions);\r\n\t\t\t\t// const questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\t\t\t\tstorageQuestionsByGroups = JSON.parse(sQuestions)\r\n\t\t\t\tloaded = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!loaded)\r\n\t\t\tstorageQuestionsByGroups = storageQuestionsByGroupsDemo\r\n\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: JSON.parse(JSON.stringify(response.data.results)),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const reloadQuestionsFromLocalStorage = (sQuestions: string) => {\r\n\tconst questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\tstorageQuestionsByGroups = questionGroups;\r\n}\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGet>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAdd>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet questionIdMax = 0;\r\n\t\tfor (let g of groups) {\r\n\t\t\tlet max = Math.max(...g.questions.map(q => q.questionId))\r\n\t\t\tif (max > questionIdMax)\r\n\t\t\t\tquestionIdMax = max;\r\n\t\t}\r\n\r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_QUESTION,\r\n\t\t  groupId: groupId, \r\n        questionId: questionIdMax + 1\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId); \r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_QUESTION,\r\n        question: response.data.results // answers.find(a => a.questionId === questionId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_QUESTION,\r\n        groupId: groupId,\r\n        questionId: questionId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestionAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t  groupId: groupId,\r\n        questionId: questionId,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const assignQuestionAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ASSIGN_QUESTION_ANSWER,\r\n\t\t  groupId: groupId,\r\n        questionId: questionId,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const storeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion: question,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of storageQuestionsByGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 100)\r\n  \t })\r\n  }  \r\n\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAddGroup>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet max = Math.max(...groups.map(g => g.groupId))\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_GROUP,\r\n\t\t  groupId: max + 1, \r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tconst group = groups.find(g => g.groupId === groupId)\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_GROUP,\r\n        group: JSON.parse(JSON.stringify(group))\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after update, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_GROUP,\r\n        groupId: groupId\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait updateGroupFromLocalStorage(group); \r\n\t\tdispatch({\r\n\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\tgroup\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageQuestionsByGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n\t})\r\n}\r\n\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS' \r\n\r\n \r\n// localStorage.removeItem(SUPPORT_QUESTIONS);\r\n  \r\nexport let storageQuestionsByGroups: IQuestionGroup[] = [\r\n]\r\n\r\nexport const storageQuestionsByGroupsDemo: IQuestionGroup[] = [\r\n\r\n\t{\r\n\t\tgroupId: 11,\r\n\t\ttitle: 'General settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 11,\r\n\t\t\t\tquestionId: 101,\r\n\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t}\r\n\t\t]\r\n\t}, \r\n\r\n\t{\r\n\t\tgroupId: 22,\r\n\t\ttitle: 'Taxes',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 22,\r\n\t\t\t\tquestionId: 201,\r\n\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: []\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 22,\r\n\t\t\t\tquestionId: 202,\r\n\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\r\n\t{\r\n\t\tgroupId: 33,\r\n\t\ttitle: 'Client settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 301,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 302,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 303,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 304,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './types';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n  // localSTorage\r\n  STORE_ANSWERS_TO_LOCAL_STORAGE = 'STORE_ANSWERS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\nexport interface IStoreAnswersToLocalStorage {\r\n\ttype: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIStoreAnswersToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\tif (sAnswers !== null) {\r\n\t\t\t\t// console.log('localStorage:', sAnswers);\r\n\t\t\t\tconst answers: IAnswer[] = JSON.parse(sAnswers);\r\n\t\t\t\tanswers.map(g => storageAnswers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\r\n\t\t}\r\n\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.EDIT_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeAnswerFromLocalStorage(answerId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.REMOVE_ANSWER,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addAnswerToLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer: answer,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateAnswerFromLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\t\t \r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageAnswers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answerId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS' \r\n\r\nconst storageAnswers: IAnswer[] = [\r\n]\r\n\r\nconst storageAnswersDemo: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 115,\r\n\t\ttext: 'Do whatever you want!',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 116,\r\n\t\ttext: 'Jump through the window.',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\r\n];\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n  SUPPORT_QUESTIONS,\r\n  reloadQuestionsFromLocalStorage\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup } from './types'\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tanswers: []\r\n };\r\n\r\n export const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: []\r\n };\r\n\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  formMode: string;\r\n  groupIdEditing: number;\r\n}\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: 0,\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId: action.questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question: {...action.question}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  question: undefined,\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\t\t// Question answers\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION_ANSWER: {\r\n\t\t\t return {\r\n\t\t\t   ...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t\t{ ...q, answers: [...q.answers] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...q, answers: q.answers.filter(answerId => answerId !== action.answerId) }\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}   \r\n\r\n\t\tcase QuestionActionTypes.ASSIGN_QUESTION_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t\t questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t  { ...g, questions: [...g.questions] } \r\n\t\t\t\t  : \r\n\t\t\t\t  { ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t  { ...q, answers: [...q.answers] } \r\n\t\t\t\t\t  : \r\n\t\t\t\t\t  { ...q, answers: [...q.answers, action.answerId] }\r\n\t\t\t\t  )\r\n\t\t\t  })\r\n\t\t  }\r\n\t  }   \r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: action.groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId: action.groupId }]\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  groupIdEditing: action.group.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: 0,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ? \r\n\t\t\t\t\tg \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}    \r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions]})\r\n\t\t\t\t\treturn acc\r\n\t\t\t  \t}, [])\r\n\t\t\t};\r\n\t\t}   \t\t\r\n\t\t\t \r\n\t\tcase QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE: {\r\n\t\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(state.questionGroups));\r\n\t\t\treloadQuestionsFromLocalStorage(JSON.stringify(state.questionGroups));\r\n\t\t\treturn state;\r\n\t\t}   \t\t\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n  SUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport {IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\toptions: []\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n\r\n\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n\t\treturn {\r\n        ...state,\r\n        answers: action.answers.map(answer => { return {...answer, words: answer.text.split(' ')} }),\r\n      };\r\n\t} \r\n \tcase AnswerActionTypes.GET_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n\t\t  \t...state,\r\n\t\t  \tformMode: 'add',\r\n        \tanswer: { \r\n\t\t\t  ...initialAnswer, \r\n\t\t\t  answerId: state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1,\r\n\t\t\t}\r\n      };\r\n\t}    \t\r\n   case AnswerActionTypes.EDIT_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answer: { ...action.answer, words: action.answer.text.split(' ')}\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\tlet answers = [];\r\n\t\tif (state.formMode === 'add') {\r\n\t\t\tanswers = [...state.answers, { ...action.answer, words:  action.answer.text.split(' ')}]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanswers = state.answers.map(a => a.answerId === action.answer.answerId ? { ...action.answer, words:  action.answer.text.split(' ')} : a)\r\n\t\t}\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answers: answers\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n      return {\r\n        ...state,\r\n\t\t  formMode: 'display',\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'display',\r\n\t\t  answers: state.answers.filter(a => a.answerId !== action.answerId)\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\treturn state;\r\n\t}   \t\r\n\r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../Questions/reducer';\r\n\r\nimport {\tanswerReducer } from '../Answers/reducer';\r\nimport {\tIAnswerState } from '../Answers/types';\r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\nimport { createRef, RefObject } from 'react'\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\nlet inputAutosuggest = createRef<HTMLInputElement>();\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], tekst: string, onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t//inputAutosuggest: React.RefObject<HTMLInputElement>;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tvalue: props.tekst || '',\r\n\t\t\tsuggestions: this.getSuggestions(''),\r\n\t\t\thighlighted: ''\r\n\t\t};\r\n\t\t//this.inputAutosuggest = createRef<HTMLInputElement>();\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tsetTimeout(() => {\r\n\t\t\tconsole.log(1, inputAutosuggest)\r\n\t\t\tconsole.log(2, inputAutosuggest.current)\r\n\t\t\t//inputAutosuggest!.current!.focus();\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\twindow.focus()\r\n\t\t\t\tinputAutosuggest!.current!.focus();\r\n\t\t\t}, 500)\r\n\r\n\t}, 100)\r\n\r\n\t\t// console.log('componentDidMount', document)\r\n\t\t// console.log(document?.getElementById('inputAutoSuggest'))\r\n\t\t//document?.getElementById('inputAutoSuggest')?.focus(); \r\n\t}\r\n\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent)\r\n\t\t\t  }}\r\n\r\n\t\t\t  />;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\t// protected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t// \t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t// \t return (\r\n\t// \t\t  <div>\r\n\t// \t\t\t\t<input {...restInputProps} />\r\n\t// \t\t  </div>\r\n\t// \t );\r\n\t// }\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.RenderInputComponentProps): JSX.Element {\r\n\t\tconst { ref, ...restInputProps } = inputProps;\r\n\t\tconsole.log('refffffffffffffffff', ref)\r\n\t\tconsole.log('thissssssssssssssss', this)\r\n\r\n\r\n\t\t// if (ref !== undefined)\r\n\t\t// \tthis.inputAutosuggest = ref as React.RefObject<HTMLInputElement>;\r\n\t\treturn (\r\n\t\t\t <div>\r\n\t\t\t\t   <input {...restInputProps} ref={inputAutosuggest}/>\r\n\t\t\t </div>\r\n\t\t);\r\n   }\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\t\r\n\tprotected onChange(event: /*React.ChangeEvent<HTMLInputElement>*/ React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\tthis.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IAnswer }  from '../Answers/types'\r\nimport './AutoSuggest.css'\r\nimport { IQuestion } from '../Questions/types';\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IAnswer> };\r\n\r\ninterface IProps {\r\n\tanswersUnassigned: IAnswer[], \r\n\tquestion: IQuestion,\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void\r\n}\r\n\r\nexport class AutoSuggestAnswer extends React.Component<IProps, any> {\r\n\r\n\tstate: any;\r\n\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={false}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'contact'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IAnswer>): void {\r\n\t\t const answer: IAnswer = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.answerId} (${question.text}).`);\r\n\t\t this.props.assignQuestionAnswer(\r\n\t\t\t this.props.question.groupId,\r\n\t\t\t this.props.question.questionId, \r\n\t\t\t answer.answerId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IAnswer, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IAnswer>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IAnswer[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\treturn this.props.answersUnassigned.filter(answer => this.anyWord(valueWordRegex, answer.words!))\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IAnswer) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AutoSuggestAnswer } from '../../components/AutoSuggestAnswer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tanswers?: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string,\r\n\tremoveQuestionAnswer?: (groupId: number, questionId: number, answerId: number) => void,\r\n\tassignQuestionAnswer?: (groupId: number, questionId: number, answerId: number) => void\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n\t const { question, questionAnswers, answers, canEdit, formMode, removeQuestionAnswer, assignQuestionAnswer } = props;  // question, \r\n\t const answersUnassigned = answers?.filter(a => !question.answers.includes(a.answerId))\r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{/* { questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t} */}\r\n\t\t\t{ questionAnswers.length > -1 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>{ questionAnswers.length === 0 ? 'No answers yet' : 'Answers'}</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => { \r\n\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer!(question.groupId, question.questionId, answer.answerId)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{canEdit && formMode !== 'display' && <tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<AutoSuggestAnswer question={question} answersUnassigned={answersUnassigned!} assignQuestionAnswer={assignQuestionAnswer!} />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t\t</tr>}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tanswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tcancel: () => void;\r\n\tsaveForm: (question: IQuestion, formMode: string) => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void; \t\r\n }\r\n\r\nexport const Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n  return (\r\n\t  <>\r\n   \t<form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  multiple\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit && \r\n\t\t\t<button onClick={() => props.cancel()}>Cancel</button>}\r\n\t\t{ props.canEdit && \r\n      \t<button type=\"submit\">Save</button>}\r\n    </form>\r\n\r\n\t\t<br />\r\n\t\t<QuestionAnswers \r\n\t\t\tquestion={props.question} \r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tanswers={props.answers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n\t\t\tremoveQuestionAnswer={props.removeQuestionAnswer}\r\n\t\t\tassignQuestionAnswer={props.assignQuestionAnswer}\r\n\t\t/>\t \r\n\t\t</>\r\n  );\r\n};","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tanswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tedit: () => void;\r\n\tremove: () => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void; \t\r\n }\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers\r\n\t\t\tquestion={props.question}\r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n\t\t/>\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.edit()}>Edit</button>\r\n\t\t\t<button onClick={() => props.remove()}>Remove</button>\r\n\t\t\t</>\r\n\t\t}\r\n    </form>\r\n  );\r\n};","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ isHovered: false });\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = () => setValue({ isHovered: true });\r\n\tconst handleMouseOut = () => setValue({ isHovered: false });\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut());\r\n \r\n\t\t\treturn () => {\r\n\t\t\t\tnode.removeEventListener('mouseenter', () => handleMouseOver());\r\n\t\t\t\tnode.removeEventListener('mouseleave', () => handleMouseOut());\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\tconst { groupId, questionId } = question;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && \r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit\" onClick={() => edit(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove\" onClick={() => remove(groupId, questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, editGroup, removeGroup } = props;\r\n\r\n   return (\r\n\t\t<div ref={hoverRef} key={questionGroup.groupId} className=\"name\">\r\n\t\t\t{questionGroup.title}\r\n\t\t\t{hoverProps.isHovered &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\t\t\t\r\n\t\t\t{hoverProps.isHovered && questionGroup.questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\t\taddGroup, editGroup, removeGroup, storeGroup,\r\n\t\t\t\tremoveQuestionAnswer, assignQuestionAnswer } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t {\r\n\t\t\tinputEl.current!.select();\r\n\t\t\tinputEl.current!.focus()\r\n\t\t}\r\n\t}, 100)\r\n\r\n   return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest \r\n\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing === questionGroup.groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={questionGroup.title}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== questionGroup.groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={question.questionId}\r\n\t\t\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\tAdd a new Section\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IQuestion, IComponentProps } from '../types';\r\n\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\ntype SupportParams = {\r\n\ttekst: string;\r\n};\r\n  \r\nconst PromoterPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\tlet { tekst } = useParams<SupportParams>();\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, onSelectQuestion, cancel, saveForm, canEdit,\r\n\t\tremoveQuestionAnswer, assignQuestionAnswer } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t{/* Support Page tekst: {tekst} */}\r\n\t\t\t\t\t<AutoSuggest\r\n\t\t\t\t\t\tquestionGroups={questionGroups}\r\n\t\t\t\t\t\ttekst={tekst}\r\n\t\t\t\t\t\tonSelectQuestion={onSelectQuestion} \r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default PromoterPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup,\r\n\tremoveQuestionAnswer,\r\n\tassignQuestionAnswer\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport PromoterPage from '../components/PromoterPage'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionState.questionGroups,\r\n\t\tquestion: store.questionState.question!,\r\n\t\tquestionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionState.formMode,\r\n\t\tgroupIdEditing: store.questionState.groupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group)),\r\n\r\n\t\t// question answers\r\n\t\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(removeQuestionAnswer(groupId, questionId, answerId)),\r\n\r\n\t\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId))\r\n\t}\r\n}\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(PromoterPage)\r\n};","import * as React from 'react';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","const palx = require('palx');\r\nexport const BASE_COLOR = '#666ee8';\r\nexport const COLORS = palx(BASE_COLOR);","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\nimport { COLORS } from '../../formik/theme';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n }\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n      answerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n   },\r\n   validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\tid=\"answerId\"\r\n\t\t\tname=\"answerId\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.answerId}\r\n\t\t\tdisabled\r\n\t\t\tstyle={{width: '50px'}}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst color = 'blue';\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n\treturn (\r\n\t\t<div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\theight: '100%',\r\n\t\t\tbackground: COLORS[color][5],\r\n\t\t\tpadding: '4rem 2rem',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tborderRadius: '4px',\r\n\t\t\t\tboxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n\t\t\t\tbackground: '#fff',\r\n\t\t\t\tmaxWidth: 400,\r\n\t\t\t\tmargin: '0 auto',\r\n\t\t\t\tpadding: '2rem',\r\n\t\t\t}}\r\n\t\t\t>\r\n\t\t\t<div className=\"formik-example formik-example--blue\">\r\n\t\t\t\t<Form {...props} />\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</div>\t\r\n\t)\r\n}","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer,\r\n\tusedAnswers: number[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nexport const ListRow: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answer, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<tr key={answer.answerId} >\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.answerId}\r\n\t\t\t</td>\r\n\t\t\t<td className=\"name\">\r\n\t\t\t\t{answer.text}\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\ttitle=\"Add a new Answer\"\r\n\t\t\t\t\tonClick={() => edit(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button \r\n\t\t\t\t\tdisabled={usedAnswers.includes(answer.answerId)}\r\n\t\t\t\t\tclassName=\"button-remove\"\r\n\t\t\t\t\ttitle=\"Remove Answer\"\r\n\t\t\t\t\tonClick={() => remove(answer.answerId)}>\r\n\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t);\r\n  }\r\n\r\n","import * as React from 'react';\r\n\r\nimport { IAnswer } from '../types';\r\nimport { ListRow } from './ListRow';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tusedAnswers: number[],\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n}\r\n\r\nconst List: React.FC<IProps> = (props: IProps) => {\r\n\tconst { answers, usedAnswers, edit, remove } = props;\r\n\treturn (\r\n\t\t<table>\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t\t<th></th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t<ListRow\r\n\t\t\t\t\t\tkey={answer.answerId}\r\n\t\t\t\t\t\tanswer={answer}\r\n\t\t\t\t\t\tusedAnswers={usedAnswers}\r\n\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t);\r\n  }\r\n\r\nexport default List\r\n\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\nimport { ListRow } from './ListRow';\r\nimport List from './List';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer,\r\n\tusedAnswers: number[],\r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\ntype MyParams = {\r\n\tslug: string;\r\n  };\r\n\r\nconst Page: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams<MyParams>();\r\n\t// slug = ''\r\n\tconst { answers, answer, usedAnswers, formMode, add, edit, remove, cancel, saveForm } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\t\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t\t<List answers={answers} usedAnswers={usedAnswers} edit={edit} remove={remove} />\r\n\t\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Page\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Page from '../components/Page'\r\nimport { IQuestionGroup } from '../../Questions/types';\r\n\r\nconst getUsedAnswers = (questionGroups: IQuestionGroup[]) : number[]=> {\r\n\tlet answerIds: number[] = [];\r\n\tfor (let group of questionGroups)\r\n\t\tfor (let question of group.questions)\r\n\t\t\tanswerIds = answerIds.concat(question.answers)\r\n\treturn answerIds;\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\tanswers: store.answerState.answers,\r\n\tanswer: store.answerState.answer!,\r\n\tformMode: store.answerState.formMode,\r\n\tusedAnswers: getUsedAnswers(store.questionState.questionGroups)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Page);","\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { Store } from 'redux';\r\n\r\nimport configureStore, { IAppState } from './store/Store';\r\nimport { getAllQuestions } from './Questions/actions';\r\nimport { getAllAnswers } from './Answers/actions';\r\n\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nimport App from './components/App';\r\nimport AnswersPage from './Answers/containers/Page'\r\nimport containers from './Questions/containers/Pages'\r\n\r\nimport './formik/formikStyles.css';\r\nimport { css } from 'glamor';\r\nimport { COLORS } from './formik/theme';\r\nconst { base, black, ...cols } = COLORS;\r\n\r\nfunction getQueryStringParams(paramName: string) : string {\r\n\tlet searchParams = new URLSearchParams(window.location.search.substring(1));\r\n\tsearchParams.forEach(p => console.log(p))\r\n\tconst s =  searchParams.get(paramName) || '';\r\n\treturn s;\r\n}\r\n\r\n//const tekst = getQueryStringParams('tekst');\r\n\r\n// Cool example colors.\r\nObject.keys(cols).forEach(color => {\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit'],\r\n\t.formik-example.formik-example--${color} button.primary`,\r\n\t  {\r\n\t\t background: COLORS[color][5],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:focus,\r\n\t  .formik-example.formik-example--${color} button.primary:focus`,\r\n\t  {\r\n\t\t background: COLORS[color][6],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:active,\r\n\t  .formik-example.formik-example--${color} button.primary:active`,\r\n\t  {\r\n\t\t background: COLORS[color][7],\r\n\t  }\r\n\t);\r\n \r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} input:focus, .formik-example.formik-example--${color} select:focus`,\r\n\t  {\r\n\t\t borderColor: COLORS[color][4],\r\n\t\t boxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 0 3px ${COLORS[color][1]}`,\r\n\t\t outline: 'none',\r\n\t  }\r\n\t);\r\n });\r\n\r\n\r\ninterface IProps {\r\n\tstore: Store<IAppState>;\r\n}\r\n\r\n// <Router basename={'/'}>\r\nconst Root: React.SFC<IProps> = props => {\r\n\treturn (\r\n\t\t<Provider store={props.store} >\r\n\t\t\t<Router basename={'/'}>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/supporter/promo\">Supporter</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li  className=\"push-right\">\r\n\t\t\t\t\t\t\t<Link to=\"/answers/sima\">Sign In</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\t\t\t\t\t\r\n\t\t\t\t</nav>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t{/* exact */}\r\n\t\t\t\t\t\t<Route exact path=\"/supporter/:tekst?\">\r\n\t\t\t\t\t\t\t{<App />}\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/questions\">\r\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\r\n\t\t\t\t\t\t\t<AnswersPage />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{/* <Route\r\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\r\n\t\t\t\t\t\t\trender={({ match }) => {\r\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\r\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\t\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\n// Generate the store\r\nconst store = configureStore();\r\nstore.dispatch(getAllQuestions());\r\nstore.dispatch(getAllAnswers());\r\n\r\n// Render the App\r\n// ReactDOM.render(<Root store={store} />, document.getElementById(\r\n//   'root'\r\n// ) as HTMLElement);\r\n\r\n// React.StrictMode\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t  <Root store={store} />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root') \r\n  );"],"sourceRoot":""}